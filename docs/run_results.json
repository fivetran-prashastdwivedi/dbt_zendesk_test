{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.9", "generated_at": "2024-05-01T20:35:35.935755Z", "invocation_id": "659ffb36-7711-40e5-b3ef-3261c91a730a", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:30.233369Z", "completed_at": "2024-05-01T20:35:30.264924Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:30.271148Z", "completed_at": "2024-05-01T20:35:30.271158Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04191184043884277, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.my_new_project.my_first_dbt_model", "compiled": true, "compiled_code": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "relation_name": "`dbt-package-testing`.`zz_dbt_renee`.`my_first_dbt_model`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:30.253100Z", "completed_at": "2024-05-01T20:35:30.709877Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:30.711355Z", "completed_at": "2024-05-01T20:35:30.711377Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.48038315773010254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__domain_name_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_domain_names variable within your dbt_project.yml file to False.\n\n\nselect `index`,\n  `organization_id`,\n  `_fivetran_synced`,\n  `domain_name` \nfrom `digital-arbor-400`.`zendesk_new`.`domain_name` as domain_name_table", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__domain_name_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:30.250296Z", "completed_at": "2024-05-01T20:35:30.723926Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:30.724758Z", "completed_at": "2024-05-01T20:35:30.724766Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.49387288093566895, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__brand_tmp", "compiled": true, "compiled_code": "select `id`,\n  `_fivetran_deleted`,\n  `_fivetran_synced`,\n  `active`,\n  `brand_url`,\n  `default`,\n  `has_help_center`,\n  `help_center_state`,\n  `logo_content_type`,\n  `logo_content_url`,\n  `logo_deleted`,\n  `logo_file_name`,\n  `logo_height`,\n  `logo_id`,\n  `logo_inline`,\n  `logo_mapped_content_url`,\n  `logo_size`,\n  `logo_url`,\n  `logo_width`,\n  `name`,\n  `subdomain`,\n  `url`  \nfrom `digital-arbor-400`.`zendesk_new`.`brand` as brand_table", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__brand_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:30.272739Z", "completed_at": "2024-05-01T20:35:30.784950Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:30.785591Z", "completed_at": "2024-05-01T20:35:30.785597Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.5139050483703613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__group_tmp", "compiled": true, "compiled_code": "select `id`,\n  `_fivetran_deleted`,\n  `_fivetran_synced`,\n  `created_at`,\n  `name`,\n  `updated_at`,\n  `url`  \nfrom `digital-arbor-400`.`zendesk_new`.`group` as group_table", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__group_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:30.715843Z", "completed_at": "2024-05-01T20:35:31.151277Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:31.152041Z", "completed_at": "2024-05-01T20:35:31.152053Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.43836283683776855, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__organization_tmp", "compiled": true, "compiled_code": "select `id`,\n  `_fivetran_synced`,\n  `created_at`,\n  `custom_account_id`,\n  `custom_account_owner`,\n  `custom_account_owner_email`,\n  `custom_funnel_stage`,\n  `custom_last_modified_date`,\n  `custom_type`,\n  `details`,\n  `external_id`,\n  `group_id`,\n  `name`,\n  `notes`,\n  `shared_comments`,\n  `shared_tickets`,\n  `updated_at`,\n  `url`,\n  `custom_assigned_se`,\n  `custom_sync_with_salesforce`,\n  `custom_partner_type`,\n  `custom_partner_tier`,\n  `custom_platform_level`,\n  `custom_last_sync_time`,\n  `custom_account_status`,\n  `custom_health_score`,\n  `custom_region`,\n  `custom_segment`,\n  `custom_customer_type`,\n  `custom_first_won_date`,\n  `custom_assigned_tsm_email`,\n  `custom_us_only_support`,\n  `custom_account_level`,\n  `custom_vip_org`,\n  `custom_bcf`,\n  `custom_pbf_account`,\n  `custom_hvr_update`,\n  `custom_hvr_migrated_account`,\n  `custom_org_prioritization_level_org_`,\n  `custom_has_csat_link_expander`,\n  `custom_self_service_account`,\n  `custom_strategic_csm_email`,\n  `custom_account_owner_role`,\n  `custom_embedded_am_email`,\n  `custom_premium_support`,\n  `custom_premium_details`,\n  `custom_assigned_se_email`,\n  `custom_account_has_services`,\n  `custom_fivetran_account_id`,\n  `custom_primary_services_owner`,\n  `custom_do_not_request_access`,\n  `custom_motion`\nfrom `digital-arbor-400`.`zendesk_new`.`organization` as organization_table", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__organization_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:30.727054Z", "completed_at": "2024-05-01T20:35:31.239256Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:31.239841Z", "completed_at": "2024-05-01T20:35:31.239848Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.5141961574554443, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_comment_tmp", "compiled": true, "compiled_code": "select `id`,\n  `_fivetran_synced`,\n  `body`,\n  `created`,\n  `facebook_comment`,\n  `public`,\n  `ticket_id`,\n  `tweet`,\n  `user_id`,\n  `voice_comment`,\n  `via_channel`,\n  `via_source_from_title`,\n  `via_source_from_id`,\n  `via_source_from_address`,\n  `via_source_rel`,\n  `via_source_to_name`,\n  `via_source_to_address`,\n  `html_body`,\n  `metadata`,\n  `plain_body`,\n  `via_source_from_subject`,\n  `via_source_from_original_recipients`,\n  `via_source_from_name`,\n  `via_source_to_email_ccs`,\n  `via_source_from_channel`,\n  `via_source_from_post_url`,\n  `via_source_from_post_id`,\n  `via_source_from_post_name`\nfrom `digital-arbor-400`.`zendesk_new`.`ticket_comment` as ticket_comment_table", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket_comment_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:30.787604Z", "completed_at": "2024-05-01T20:35:31.323899Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:31.324295Z", "completed_at": "2024-05-01T20:35:31.324300Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.537726879119873, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_field_history_tmp", "compiled": true, "compiled_code": "select `field_name`,\n  `ticket_id`,\n  `updated`,\n  `_fivetran_synced`,\n  `user_id`,\n  `value`,\n  `via_channel`,\n  `via_source_from_title`,\n  `via_source_from_id`,\n  `via_source_from_address`,\n  `via_source_rel`,\n  `via_source_to_name`,\n  `via_source_to_address`,\n  `via_source_from_subject`,\n  `via_source_from_original_recipients`,\n  `via_source_from_name`,\n  `via_source_to_email_ccs`,\n  `via_source_from_channel`,\n  `via_source_from_deleted`,\n  `via_source_from_post_url`,\n  `via_source_from_revision_id`,\n  `via_source_from_post_id`,\n  `via_source_from_post_name`\nfrom `digital-arbor-400`.`zendesk_new`.`ticket_field_history` as ticket_field_history_table", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket_field_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:31.154516Z", "completed_at": "2024-05-01T20:35:31.602178Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:31.603190Z", "completed_at": "2024-05-01T20:35:31.603200Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4506049156188965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_form_history_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_ticket_form_history variable within your dbt_project.yml file to False.\n\n\nselect `id`,\n  `updated_at`,\n  `_fivetran_deleted`,\n  `_fivetran_synced`,\n  `active`,\n  `created_at`,\n  `display_name`,\n  `end_user_visible`,\n  `name`,\n  `default`,\n  `raw_name`,\n  `in_all_brands`,\n  `position`,\n  `raw_display_name`,\n  `url`\nfrom `digital-arbor-400`.`zendesk_new`.`ticket_form_history` as ticket_form_history_table", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket_form_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:31.325862Z", "completed_at": "2024-05-01T20:35:31.743222Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:31.744098Z", "completed_at": "2024-05-01T20:35:31.744105Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.41962385177612305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_tmp", "compiled": true, "compiled_code": "select `id`,\n  `_fivetran_synced`,\n  `allow_channelback`,\n  `assignee_id`,\n  `brand_id`,\n  `created_at`,\n  `custom_additional_details`,\n  `custom_alternatives`,\n  `custom_connector`,\n  `custom_consent_to_access`,\n  `custom_current_state`,\n  `custom_error_messages`,\n  `custom_git_zen_data`,\n  `custom_origin`,\n  `custom_proposed_solution`,\n  `custom_severity`,\n  `custom_sql_query`,\n  `custom_steps_to_reproduce`,\n  `description`,\n  `due_at`,\n  `external_id`,\n  `forum_topic_id`,\n  `group_id`,\n  `has_incidents`,\n  `is_public`,\n  `organization_id`,\n  `priority`,\n  `problem_id`,\n  `recipient`,\n  `requester_id`,\n  `status`,\n  `subject`,\n  `submitter_id`,\n  `system_client`,\n  `system_ip_address`,\n  `system_json_email_identifier`,\n  `system_latitude`,\n  `system_location`,\n  `system_longitude`,\n  `system_message_id`,\n  `system_raw_email_identifier`,\n  `ticket_form_id`,\n  `type`,\n  `updated_at`,\n  `url`,\n  `via_channel`,\n  `via_source_from_id`,\n  `via_source_from_title`,\n  `via_source_rel`,\n  `via_source_to_address`,\n  `via_source_to_name`,\n  `custom_sfdc_case_`,\n  `custom_connector_type`,\n  `custom_se_notes`,\n  `custom_warehouse_id`,\n  `custom_github_link`,\n  `custom_classification`,\n  `custom_ticket_priority`,\n  `custom_customer_risk`,\n  `system_machine_generated`,\n  `custom_escalated`,\n  `custom_issue_escalation_notes`,\n  `custom_se_manager_notes`,\n  `custom_related_to`,\n  `merged_ticket_ids`,\n  `custom_connector_name`,\n  `custom_destination_type`,\n  `custom_group_id`,\n  `custom_fivetran_warehouse`,\n  `custom_slack_channel_id`,\n  `custom_ticket_quality`,\n  `via_source_from_address`,\n  `custom_escalation_reason`,\n  `followup_ids`,\n  `via_followup_source_id`,\n  `custom_post_id`,\n  `custom_post_name`,\n  `custom_post_path`,\n  `custom_grant_access_status`,\n  `custom_grant_access_service`,\n  `custom_grant_access_scope`,\n  `custom_grant_access_schema`,\n  `custom_grant_access_group`,\n  `custom_grant_access_expiration`,\n  `custom_grant_access_approved_at`,\n  `custom_grant_access_group_name`,\n  `custom_grant_access_revoked_at`,\n  `custom_bug_sub_category`,\n  `custom_fivetran_group_name`,\n  `custom_fivetran_destination_type`,\n  `custom_subcategory_bug`,\n  `custom_sub_classification_bug`,\n  `custom_sub_classification_data_integrity`,\n  `custom_sub_classification_account_management`,\n  `custom_sub_classification_other`,\n  `custom_sub_classification_sync_issue`,\n  `custom_sub_classification_education_needed`,\n  `custom_sub_classification_connector_issue`,\n  `custom_sub_classification_network_security`,\n  `custom_sub_classification_incident`,\n  `custom_sub_classification_feature_flag`,\n  `custom_sub_classification_fivetran_platform`,\n  `custom_sub_classification_destination_issue`,\n  `custom_sub_classification_transformations`,\n  `custom_sub_classification_billing`,\n  `custom_sub_classification_sales_inquiry`,\n  `custom_reopen`,\n  `custom_total_time_spent_sec_`,\n  `custom_time_spent_last_update_sec_`,\n  `custom_fivetran_account_status`,\n  `custom_snooze`,\n  `custom_customer_data_check`,\n  `custom_screenshot_of_connector_s_setup_page_included`,\n  `custom_on_hold_reason_`,\n  `custom_request_type_`,\n  `custom_screenshot_of_transformation_setup_page_included`,\n  `custom_account_level`,\n  `custom_pbf_`,\n  `custom_reported_severity_`,\n  `custom_error_shown_in_connector_s_setup_page_`,\n  `custom_details_of_issue_with_alert_shown_in_connector_s_dashboard_`,\n  `custom_query_used_to_verify_data_integrity_`,\n  `custom_unique_ids_for_source_records_not_showing_`,\n  `custom_number_of_end_customers_impacted_due_to_inquiry_`,\n  `custom_error_shown_in_logs_status_bar_in_connector_s_dashboard_`,\n  `custom_name_of_schema_table_column_seen_in_source_not_showing_in_the_destination_`,\n  `custom_steps_taken_that_lead_to_ui_error_`,\n  `custom_user_s_email_address_and_current_role_`,\n  `custom_estimated_number_of_records_of_mar_dispute_`,\n  `custom_reasoning_for_mar_dispute_`,\n  `custom_date_range_of_mar_dispute_`,\n  `custom_support_case_numbers_related_to_mar_dispute_`,\n  `custom_type_of_ssh_setup_being_used_`,\n  `custom_ticket_note_`,\n  `custom_support_case_numbers_related_to_sla_dispute_`,\n  `custom_estimated_number_of_records_of_sla_dispute_`,\n  `custom_date_range_of_sla_dispute_`,\n  `custom_reasoning_for_sla_dispute_`,\n  `custom_security_request_type_`,\n  `custom_account_id`,\n  `custom_grant_access_account_name`,\n  `custom_account_name`,\n  `custom_grant_access_account`,\n  `custom_snooze_state`,\n  `custom_snoozed_until`,\n  `custom_on_hold_reason_security_`,\n  `custom_classification_old`,\n  `custom_sub_classification_data_integrity_old`,\n  `custom_sub_classification_sync_issue_old`,\n  `custom_reason_for_ticket_creation_classification_`,\n  `custom_sub_classification_billing_old`,\n  `custom_sub_classification_feature_flag_old`,\n  `custom_sub_classification_education_needed_old`,\n  `custom_sub_classification_transformations_old`,\n  `custom_sub_classification_bug_old`,\n  `custom_sub_classification_destination_issue_old`,\n  `custom_resolution_description_`,\n  `custom_sub_classification_network_security_old`,\n  `custom_sub_classification_connector_issue_old`,\n  `custom_sub_classification_incident_old`,\n  `custom_sub_classification_other_old`,\n  `custom_sub_classification_fivetran_platform_old`,\n  `custom_sub_classification_account_management_old`,\n  `custom_sub_classification_sales_inquiry_old`,\n  `custom_logs_improvement_note`,\n  `custom_logs_improvement`,\n  `custom_hub_os_`,\n  `custom_environment_`,\n  `custom_source_os_`,\n  `custom_target_os_`,\n  `custom_source_`,\n  `custom_source_dbms_`,\n  `custom_target_dbms_`,\n  `custom_hub_dbms_`,\n  `custom_hub_`,\n  `custom_target_`,\n  `custom_reason_for_ticket_classification_`,\n  `custom_jira_ticket_id_`,\n  `custom_type_request_`,\n  `custom_resolution_summary_`,\n  `custom_legacy_id_`,\n  `custom_environment_notes_`,\n  `custom_ticket_complexity_score`,\n  `system_email_id`,\n  `custom_org_prioritization_level_ticket_`,\n  `system_eml_redacted`,\n  `custom_consulting`,\n  `custom_deflection_description_and_solution`,\n  `custom_deflection_strategy`,\n  `custom_modify_state_pr`,\n  `custom_patch_level`,\n  `custom_submit_this_for_approval`,\n  `custom_credit_request_approval_status`,\n  `custom_cec_record_in_salesforce`,\n  `custom_credit_request_approval_comments_internal_`,\n  `custom_credit_reason_product_`,\n  `custom_credit_refund_type`,\n  `custom_credit_request_type`,\n  `custom_credit_reason_non_product_`,\n  `custom_dollar_amount`,\n  `custom_credit_quantity`,\n  `custom_credit_sync_error_message`,\n  `custom_deflection_customer_issue`,\n  `custom_deflection_solution`,\n  `custom_incident_date`,\n  `custom_professional_services_work`,\n  `custom_support_helper_ticket_note`,\n  `custom_non_pr_refund`,\n  `custom_region`,\n  `custom_pending_reason`,\n  `custom_department`,\n  `custom_estimated_effort_score`,\n  `custom_prioritized`,\n  `custom_lead_consulted`,\n  `custom_support_should_not_contact_customer`,\n  `custom_current_effort_score`,\n  `custom_support_helper_sync_subsciption`,\n  `custom_csat_owner`,\n  `custom_linked_ticket`,\n  `custom_support_helper_ticket_mar_tool_cache`,\n  `custom_status_id`,\n  `custom_swarm_team_escalation_reason`,\n  `custom_credit_reason_customer_error_`,\n  `allow_attachments`,\n  `raw_subject`,\n  `from_messaging_channel`,\n  `custom_modify_state_pr_history`,\n  `custom_google_meet_event_time`,\n  `custom_google_meet_link`,\n  `custom_csat_comment_3`,\n  `custom_csat_comment_2`,\n  `custom_csat_comment_1`,\n  `custom_csat_rating_2`,\n  `custom_csat_rating_1`,\n  `custom_csat_rating_3`,\n  `custom_a_b_testing`,\n  `custom_connector_issue_type`,\n  `custom_fivetran_product_issue_type`,\n  `via_source_from_subject`,\n  `via_source_from_channel`,\n  `via_source_from_name`,\n  `custom_deflection_none_of_the_above`,\n  `custom_account_issue_type`,\n  `custom_billing_issue_type`,\n  `custom_account_error_details`,\n  `custom_data_integrity_issue_type`,\n  `custom_destination_issue_type`,\n  `custom_transformation_issue_type`,\n  `custom_account_setup_issue_type`,\n  `custom_account_notification_details`,\n  `custom_payment_issue_date_range`,\n  `custom_error_shown_in_logs_or_status_bar_in_destination_s_dashboard`,\n  `custom_error_shown_in_destination_s_setup_page`,\n  `custom_invoice_query_date_range`,\n  `via_source_from_post_url`,\n  `via_source_from_post_id`,\n  `via_source_from_post_name`,\n  `custom_linked_articles`,\n  `custom_sync_subscription_date_and_time`,\n  `custom_uuid`\nfrom `digital-arbor-400`.`zendesk_new`.`ticket` as ticket_table", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:31.746764Z", "completed_at": "2024-05-01T20:35:31.752564Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:31.753280Z", "completed_at": "2024-05-01T20:35:31.753288Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008212089538574219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.zendesk.zendesk-on-run-start-0", "compiled": true, "compiled_code": "\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:31.755437Z", "completed_at": "2024-05-01T20:35:31.761465Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:31.762119Z", "completed_at": "2024-05-01T20:35:31.762127Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00801396369934082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.my_new_project.my_second_dbt_model", "compiled": true, "compiled_code": "-- Use the `ref` function to select from other models\n\nselect *\nfrom `dbt-package-testing`.`zz_dbt_renee`.`my_first_dbt_model`\nwhere id = 1", "relation_name": "`dbt-package-testing`.`zz_dbt_renee`.`my_second_dbt_model`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:31.764137Z", "completed_at": "2024-05-01T20:35:31.773593Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:31.774107Z", "completed_at": "2024-05-01T20:35:31.774115Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01130986213684082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.my_new_project.not_null_my_first_dbt_model_id.5fb22c2710", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `dbt-package-testing`.`zz_dbt_renee`.`my_first_dbt_model`\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:31.242101Z", "completed_at": "2024-05-01T20:35:31.783956Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:31.785143Z", "completed_at": "2024-05-01T20:35:31.785156Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.5446181297302246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_tag_tmp", "compiled": true, "compiled_code": "select `tag`,\n  `ticket_id`,\n  `_fivetran_synced`\nfrom `digital-arbor-400`.`zendesk_new`.`ticket_tag` as ticket_tag_table", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket_tag_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:31.777011Z", "completed_at": "2024-05-01T20:35:31.786126Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:31.787231Z", "completed_at": "2024-05-01T20:35:31.787235Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011549949645996094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.my_new_project.unique_my_first_dbt_model_id.16e066b321", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee`.`my_first_dbt_model`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:31.606456Z", "completed_at": "2024-05-01T20:35:32.078555Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:32.080140Z", "completed_at": "2024-05-01T20:35:32.080160Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4763329029083252, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__user_tmp", "compiled": true, "compiled_code": "select `id`,\n  `_fivetran_synced`,\n  `active`,\n  `alias`,\n  `authenticity_token`,\n  `chat_only`,\n  `created_at`,\n  `custom_role_id`,\n  `custom_test`,\n  `details`,\n  `email`,\n  `external_id`,\n  `last_login_at`,\n  `locale`,\n  `locale_id`,\n  `moderator`,\n  `name`,\n  `notes`,\n  `only_private_comments`,\n  `organization_id`,\n  `phone`,\n  `remote_photo_url`,\n  `restricted_agent`,\n  `role`,\n  `shared`,\n  `shared_agent`,\n  `signature`,\n  `suspended`,\n  `ticket_restriction`,\n  `time_zone`,\n  `two_factor_auth_enabled`,\n  `updated_at`,\n  `url`,\n  `verified`,\n  `custom_test_user_field`,\n  `custom_birthday`,\n  `custom_int`,\n  `custom_integrations`,\n  `custom_account`,\n  `custom_group`,\n  `custom_fivetran_account_id`,\n  `custom_fivetran_group_id`,\n  `custom_fivetran_user_id`,\n  `custom_fivetran_group_name`,\n  `custom_fivetran_destination_type`,\n  `custom_fivetran_account_status`,\n  `iana_time_zone`,\n  `report_csv`,\n  `default_group_id`,\n  `custom_fivetran_account_name`,\n  `custom_hvr_customer`,\n  `custom_out_of_office_agent_out_`,\n  `role_type`,\n  `shared_phone_number`   \nfrom `digital-arbor-400`.`zendesk_new`.`user` as user_table", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__user_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:31.788057Z", "completed_at": "2024-05-01T20:35:32.225233Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:32.226240Z", "completed_at": "2024-05-01T20:35:32.226251Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.4400177001953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__domain_name", "compiled": true, "compiled_code": "--To disable this model, set the using_domain_names variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__domain_name_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    domain_name\n    \n as \n    \n    domain_name\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    organization_id\n    \n as \n    \n    organization_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        organization_id,\n        domain_name,\n        index\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__domain_name`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:31.794491Z", "completed_at": "2024-05-01T20:35:32.304796Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:32.305301Z", "completed_at": "2024-05-01T20:35:32.305308Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.5127999782562256, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__brand", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__brand_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    brand_url\n    \n as \n    \n    brand_url\n    \n, \n    \n    \n    has_help_center\n    \n as \n    \n    has_help_center\n    \n, \n    \n    \n    help_center_state\n    \n as \n    \n    help_center_state\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    logo_content_type\n    \n as \n    \n    logo_content_type\n    \n, \n    \n    \n    logo_content_url\n    \n as \n    \n    logo_content_url\n    \n, \n    \n    \n    logo_deleted\n    \n as \n    \n    logo_deleted\n    \n, \n    \n    \n    logo_file_name\n    \n as \n    \n    logo_file_name\n    \n, \n    \n    \n    logo_height\n    \n as \n    \n    logo_height\n    \n, \n    \n    \n    logo_id\n    \n as \n    \n    logo_id\n    \n, \n    \n    \n    logo_inline\n    \n as \n    \n    logo_inline\n    \n, \n    \n    \n    logo_mapped_content_url\n    \n as \n    \n    logo_mapped_content_url\n    \n, \n    \n    \n    logo_size\n    \n as \n    \n    logo_size\n    \n, \n    \n    \n    logo_url\n    \n as \n    \n    logo_url\n    \n, \n    \n    \n    logo_width\n    \n as \n    \n    logo_width\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    subdomain\n    \n as \n    \n    subdomain\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as brand_id,\n        brand_url,\n        name,\n        subdomain,\n        active as is_active\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__brand`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:32.084395Z", "completed_at": "2024-05-01T20:35:32.558769Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:32.560794Z", "completed_at": "2024-05-01T20:35:32.560813Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.47900867462158203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__group", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__group_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as group_id,\n        name\n    from fields\n    \n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__group`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:32.228253Z", "completed_at": "2024-05-01T20:35:32.721940Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:32.722667Z", "completed_at": "2024-05-01T20:35:32.722675Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.4956378936767578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__organization", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__organization_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    details\n    \n as \n    \n    details\n    \n, \n    \n    \n    external_id\n    \n as \n    \n    external_id\n    \n, \n    \n    \n    group_id\n    \n as \n    \n    group_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    shared_comments\n    \n as \n    \n    shared_comments\n    \n, \n    \n    \n    shared_tickets\n    \n as \n    \n    shared_tickets\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as organization_id,\n        created_at,\n        updated_at,\n        details,\n        name,\n        external_id\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__organization`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:32.307072Z", "completed_at": "2024-05-01T20:35:32.818448Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:32.819005Z", "completed_at": "2024-05-01T20:35:32.819011Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.5131340026855469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_comment", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket_comment_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    body\n    \n as \n    \n    body\n    \n, \n    cast(null as INT64) as \n    \n    call_duration\n    \n , \n    cast(null as INT64) as \n    \n    call_id\n    \n , \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    facebook_comment\n    \n as \n    \n    facebook_comment\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as INT64) as \n    \n    location\n    \n , \n    \n    \n    public\n    \n as \n    \n    public\n    \n, \n    cast(null as INT64) as \n    \n    recording_url\n    \n , \n    cast(null as timestamp) as \n    \n    started_at\n    \n , \n    \n    \n    ticket_id\n    \n as \n    \n    ticket_id\n    \n, \n    cast(null as INT64) as \n    \n    transcription_status\n    \n , \n    cast(null as INT64) as \n    \n    transcription_text\n    \n , \n    cast(null as INT64) as \n    \n    trusted\n    \n , \n    \n    \n    tweet\n    \n as \n    \n    tweet\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    voice_comment\n    \n as \n    \n    voice_comment\n    \n, \n    cast(null as INT64) as \n    \n    voice_comment_transcription_visible\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as ticket_comment_id,\n        _fivetran_synced,\n        body,\n        cast(created as timestamp) as created_at,\n        public as is_public,\n        ticket_id,\n        user_id,\n        facebook_comment as is_facebook_comment,\n        tweet as is_tweet,\n        voice_comment as is_voice_comment\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket_comment`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:32.565670Z", "completed_at": "2024-05-01T20:35:33.007331Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.008525Z", "completed_at": "2024-05-01T20:35:33.008537Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4457399845123291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_field_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket_field_history_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    field_name\n    \n as \n    \n    field_name\n    \n, \n    \n    \n    ticket_id\n    \n as \n    \n    ticket_id\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ticket_id,\n        field_name,\n        cast(updated as timestamp) as valid_starting_at,\n        cast(lead(updated) over (partition by ticket_id, field_name order by updated) as timestamp) as valid_ending_at,\n        value,\n        user_id\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket_field_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.011978Z", "completed_at": "2024-05-01T20:35:33.021607Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.022397Z", "completed_at": "2024-05-01T20:35:33.022405Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012327194213867188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.my_new_project.not_null_my_second_dbt_model_id.151b76d778", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `dbt-package-testing`.`zz_dbt_renee`.`my_second_dbt_model`\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.024520Z", "completed_at": "2024-05-01T20:35:33.028337Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.028963Z", "completed_at": "2024-05-01T20:35:33.028968Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005759000778198242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.my_new_project.unique_my_second_dbt_model_id.57a0f8c493", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee`.`my_second_dbt_model`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:32.725278Z", "completed_at": "2024-05-01T20:35:33.134706Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.135294Z", "completed_at": "2024-05-01T20:35:33.135302Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.4116532802581787, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_form_history", "compiled": true, "compiled_code": "--To disable this model, set the using_ticket_form_history variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket_form_history_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    end_user_visible\n    \n as \n    \n    end_user_visible\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as ticket_form_id,\n        cast(created_at as timestamp) as created_at,\n        cast(updated_at as timestamp) as updated_at,\n        display_name,\n        active as is_active,\n        name\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n    \n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket_form_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.167078Z", "completed_at": "2024-05-01T20:35:33.170727Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.171215Z", "completed_at": "2024-05-01T20:35:33.171220Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005268096923828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__domain_name_organization_id.a2b5ff8fd3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organization_id\nfrom `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__domain_name`\nwhere organization_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.172790Z", "completed_at": "2024-05-01T20:35:33.175539Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.175962Z", "completed_at": "2024-05-01T20:35:33.175966Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004131793975830078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__brand_brand_id.a2419e1741", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect brand_id\nfrom `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__brand`\nwhere brand_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.177331Z", "completed_at": "2024-05-01T20:35:33.180527Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.180899Z", "completed_at": "2024-05-01T20:35:33.180902Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0044019222259521484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.unique_stg_zendesk__brand_brand_id.fdf8e23c9e", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select brand_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__brand`\n  where brand_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.182154Z", "completed_at": "2024-05-01T20:35:33.184426Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.184787Z", "completed_at": "2024-05-01T20:35:33.184791Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003426074981689453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__group_group_id.7659ed83ec", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect group_id\nfrom `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__group`\nwhere group_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.185988Z", "completed_at": "2024-05-01T20:35:33.188027Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.188373Z", "completed_at": "2024-05-01T20:35:33.188376Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0031518936157226562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.unique_stg_zendesk__group_group_id.f0658dabcd", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select group_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__group`\n  where group_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.189539Z", "completed_at": "2024-05-01T20:35:33.194420Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.194805Z", "completed_at": "2024-05-01T20:35:33.194809Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006050825119018555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__organization_aggregates", "compiled": true, "compiled_code": "with organizations as (\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__organization`\n\n--If you use organization tags this will be included, if not it will be ignored.\n\n\n--If you use using_domain_names tags this will be included, if not it will be ignored.\n\n), domain_names as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__domain_name`\n\n), domain_aggregates as (\n    select\n        organizations.organization_id,\n        \n    string_agg(domain_names.domain_name, ', ')\n\n as domain_names\n    from organizations\n\n    left join domain_names\n        using(organization_id)\n    \n    group by 1\n\n\n\n), final as (\n    select\n        organizations.*\n\n        --If you use organization tags this will be included, if not it will be ignored.\n        \n\n        --If you use using_domain_names tags this will be included, if not it will be ignored.\n        \n        ,domain_aggregates.domain_names\n        \n\n    from organizations\n\n    --If you use using_domain_names tags this will be included, if not it will be ignored.\n    \n    left join domain_aggregates\n        using(organization_id)\n    \n\n    --If you use organization tags this will be included, if not it will be ignored.\n    \n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__organization_aggregates`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.196007Z", "completed_at": "2024-05-01T20:35:33.198143Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.198492Z", "completed_at": "2024-05-01T20:35:33.198495Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0032050609588623047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__organization_organization_id.de7b98c06a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organization_id\nfrom `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__organization`\nwhere organization_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.199582Z", "completed_at": "2024-05-01T20:35:33.201399Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.201718Z", "completed_at": "2024-05-01T20:35:33.201720Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0028269290924072266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.unique_stg_zendesk__organization_organization_id.152be1ab31", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select organization_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__organization`\n  where organization_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.202764Z", "completed_at": "2024-05-01T20:35:33.204591Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.204914Z", "completed_at": "2024-05-01T20:35:33.204917Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.002820253372192383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__ticket_comment_ticket_comment_id.b821f4a606", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticket_comment_id\nfrom `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket_comment`\nwhere ticket_comment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.205957Z", "completed_at": "2024-05-01T20:35:33.208509Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.208825Z", "completed_at": "2024-05-01T20:35:33.208827Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003526926040649414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.unique_stg_zendesk__ticket_comment_ticket_comment_id.ba353330cd", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select ticket_comment_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket_comment`\n  where ticket_comment_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.209835Z", "completed_at": "2024-05-01T20:35:33.211426Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.211713Z", "completed_at": "2024-05-01T20:35:33.211715Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.002513885498046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__latest_ticket_form", "compiled": true, "compiled_code": "--To disable this model, set the using_ticket_form_history variable within your dbt_project.yml file to False.\n\n\nwith ticket_form_history as (\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket_form_history`\n),\n\nlatest_ticket_form as (\n    select\n      *,\n      row_number() over(partition by ticket_form_id order by updated_at desc) as latest_form_index\n    from ticket_form_history\n),\n\nfinal as (\n    select \n        ticket_form_id,\n        created_at,\n        updated_at,\n        display_name,\n        is_active,\n        name,\n        latest_form_index\n    from latest_ticket_form\n\n    where latest_form_index = 1\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__latest_ticket_form`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.212665Z", "completed_at": "2024-05-01T20:35:33.214345Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.214638Z", "completed_at": "2024-05-01T20:35:33.214640Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0025870800018310547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__ticket_form_history_ticket_form_id.1afe781a17", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticket_form_id\nfrom `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket_form_history`\nwhere ticket_form_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:32.820713Z", "completed_at": "2024-05-01T20:35:33.291448Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.291822Z", "completed_at": "2024-05-01T20:35:33.291825Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.47206783294677734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    allow_channelback\n    \n as \n    \n    allow_channelback\n    \n, \n    \n    \n    assignee_id\n    \n as \n    \n    assignee_id\n    \n, \n    \n    \n    brand_id\n    \n as \n    \n    brand_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    due_at\n    \n as \n    \n    due_at\n    \n, \n    \n    \n    external_id\n    \n as \n    \n    external_id\n    \n, \n    \n    \n    forum_topic_id\n    \n as \n    \n    forum_topic_id\n    \n, \n    \n    \n    group_id\n    \n as \n    \n    group_id\n    \n, \n    \n    \n    has_incidents\n    \n as \n    \n    has_incidents\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_public\n    \n as \n    \n    is_public\n    \n, \n    \n    \n    merged_ticket_ids\n    \n as \n    \n    merged_ticket_ids\n    \n, \n    \n    \n    organization_id\n    \n as \n    \n    organization_id\n    \n, \n    \n    \n    priority\n    \n as \n    \n    priority\n    \n, \n    \n    \n    problem_id\n    \n as \n    \n    problem_id\n    \n, \n    \n    \n    recipient\n    \n as \n    \n    recipient\n    \n, \n    \n    \n    requester_id\n    \n as \n    \n    requester_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    subject\n    \n as \n    \n    subject\n    \n, \n    \n    \n    submitter_id\n    \n as \n    \n    submitter_id\n    \n, \n    cast(null as INT64) as \n    \n    system_ccs\n    \n , \n    \n    \n    system_client\n    \n as \n    \n    system_client\n    \n, \n    \n    \n    system_ip_address\n    \n as \n    \n    system_ip_address\n    \n, \n    \n    \n    system_json_email_identifier\n    \n as \n    \n    system_json_email_identifier\n    \n, \n    \n    \n    system_latitude\n    \n as \n    \n    system_latitude\n    \n, \n    \n    \n    system_location\n    \n as \n    \n    system_location\n    \n, \n    \n    \n    system_longitude\n    \n as \n    \n    system_longitude\n    \n, \n    \n    \n    system_machine_generated\n    \n as \n    \n    system_machine_generated\n    \n, \n    \n    \n    system_message_id\n    \n as \n    \n    system_message_id\n    \n, \n    \n    \n    system_raw_email_identifier\n    \n as \n    \n    system_raw_email_identifier\n    \n, \n    \n    \n    ticket_form_id\n    \n as \n    \n    ticket_form_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n, \n    \n    \n    via_channel\n    \n as \n    \n    via_channel\n    \n, \n    \n    \n    via_source_from_address\n    \n as \n    \n    via_source_from_address\n    \n, \n    \n    \n    via_source_from_id\n    \n as \n    \n    via_source_from_id\n    \n, \n    \n    \n    via_source_from_title\n    \n as \n    \n    via_source_from_title\n    \n, \n    \n    \n    via_source_rel\n    \n as \n    \n    via_source_rel\n    \n, \n    \n    \n    via_source_to_address\n    \n as \n    \n    via_source_to_address\n    \n, \n    \n    \n    via_source_to_name\n    \n as \n    \n    via_source_to_name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as ticket_id,\n        _fivetran_synced,\n        assignee_id,\n        brand_id,\n        cast(created_at as timestamp) as created_at,\n        cast(updated_at as timestamp) as updated_at,\n        description,\n        due_at,\n        group_id,\n        external_id,\n        is_public,\n        organization_id,\n        priority,\n        recipient,\n        requester_id,\n        status,\n        subject,\n        problem_id,\n        submitter_id,\n        ticket_form_id,\n        type,\n        url,\n        via_channel as created_channel,\n        via_source_from_id as source_from_id,\n        via_source_from_title as source_from_title,\n        via_source_rel as source_rel,\n        via_source_to_address as source_to_address,\n        via_source_to_name as source_to_name\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.293571Z", "completed_at": "2024-05-01T20:35:33.310023Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.310671Z", "completed_at": "2024-05-01T20:35:33.310675Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01833486557006836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__field_calendar_spine", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_zendesk__calendar_spine as (\n-- depends_on: `digital-arbor-400`.`zendesk_new`.`ticket`\n\nwith spine as (\n\n    \n    \n    \n\n    \n    \n        \n            \n\n        \n\n    \n\n\n\n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n     + \n    \n    p12.generated_number * power(2, 12)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n     cross join \n    \n    p as p12\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 4374\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( '2012-05-17' as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n\n        datetime_add(\n            cast( current_date as datetime),\n        interval 1 week\n        )\n\n\n\n)\n\nselect * from filtered\n\n\n\n), recast as (\n\n    select cast(date_day as date) as date_day\n    from spine\n\n)\n\nselect *\nfrom recast\n), calendar as (\n\n    select *\n    from __dbt__cte__int_zendesk__calendar_spine\n    \n    where date_day >= (select max(date_day) from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__field_calendar_spine`)\n    \n\n), ticket as (\n\n    select \n        *,\n        -- closed tickets cannot be re-opened or updated, and solved tickets are automatically closed after a pre-defined number of days configured in your Zendesk settings\n        cast( timestamp_trunc(\n        cast(case when status != 'closed' then current_timestamp else updated_at end as timestamp),\n        day\n    ) as date) as open_until\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket`\n    \n), joined as (\n\n    select \n        calendar.date_day,\n        ticket.ticket_id\n    from calendar\n    inner join ticket\n        on calendar.date_day >= cast(ticket.created_at as date)\n        -- use this variable to extend the ticket's history past its close date (for reporting/data viz purposes :-)\n        and \n\n        datetime_add(\n            cast( ticket.open_until as datetime),\n        interval 0 month\n        )\n\n >= calendar.date_day\n\n), surrogate_key as (\n\n    select\n        *,\n        to_hex(md5(cast(coalesce(cast(date_day as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(ticket_id as string), '_dbt_utils_surrogate_key_null_') as string))) as ticket_day_id\n    from joined\n\n)\n\nselect *\nfrom surrogate_key", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__field_calendar_spine`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.308005Z", "completed_at": "2024-05-01T20:35:33.310224Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.310834Z", "completed_at": "2024-05-01T20:35:33.310837Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018388032913208008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__updates", "compiled": true, "compiled_code": "with ticket_history as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket_field_history`\n\n), ticket_comment as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket_comment`\n\n), tickets as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket`\n\n), updates_union as (\n    select \n        ticket_id,\n        field_name,\n        value,\n        null as is_public,\n        user_id,\n        valid_starting_at,\n        valid_ending_at\n    from ticket_history\n\n    union all\n\n    select\n        ticket_id,\n        cast('comment' as string) as field_name,\n        body as value,\n        is_public,\n        user_id,\n        created_at as valid_starting_at,\n        lead(created_at) over (partition by ticket_id order by created_at) as valid_ending_at\n    from ticket_comment\n\n), final as (\n    select\n        updates_union.*,\n        tickets.created_at as ticket_created_date\n    from updates_union\n\n    left join tickets\n        on tickets.ticket_id = updates_union.ticket_id\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__updates`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.312833Z", "completed_at": "2024-05-01T20:35:33.316168Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.316785Z", "completed_at": "2024-05-01T20:35:33.316788Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005178928375244141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__ticket_ticket_id.a8229e6981", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticket_id\nfrom `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket`\nwhere ticket_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.314498Z", "completed_at": "2024-05-01T20:35:33.316338Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.316945Z", "completed_at": "2024-05-01T20:35:33.316948Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00522303581237793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.unique_stg_zendesk__ticket_ticket_id.4be7124521", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select ticket_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket`\n  where ticket_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.318841Z", "completed_at": "2024-05-01T20:35:33.321704Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.322211Z", "completed_at": "2024-05-01T20:35:33.322214Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0045490264892578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__assignee_updates", "compiled": true, "compiled_code": "with ticket_updates as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__updates`\n\n), ticket as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket`\n\n), ticket_requester as (\n    select\n        ticket.ticket_id,\n        ticket.assignee_id,\n        ticket_updates.valid_starting_at\n\n    from ticket\n\n    left join ticket_updates\n        on ticket_updates.ticket_id = ticket.ticket_id\n            and ticket_updates.user_id = ticket.assignee_id\n\n), final as (\n    select \n        ticket_id,\n        assignee_id,\n        max(valid_starting_at) as last_updated,\n        count(*) as total_updates\n    from ticket_requester\n\n    group by 1, 2\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__assignee_updates`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.320019Z", "completed_at": "2024-05-01T20:35:33.322042Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.322832Z", "completed_at": "2024-05-01T20:35:33.322835Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00500035285949707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__requester_updates", "compiled": true, "compiled_code": "with ticket_updates as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__updates`\n\n), ticket as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket`\n\n), ticket_requester as (\n    select\n        ticket.ticket_id,\n        ticket.requester_id,\n        ticket_updates.valid_starting_at\n\n    from ticket\n\n    left join ticket_updates\n        on ticket_updates.ticket_id = ticket.ticket_id\n            and ticket_updates.user_id = ticket.requester_id\n\n), final as (\n    select \n        ticket_id,\n        requester_id,\n        max(valid_starting_at) as last_updated,\n        count(*) as total_updates\n    from ticket_requester\n\n    group by 1, 2\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__requester_updates`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.324376Z", "completed_at": "2024-05-01T20:35:33.328337Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.328846Z", "completed_at": "2024-05-01T20:35:33.328849Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0064849853515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__ticket_historical_assignee", "compiled": true, "compiled_code": "with assignee_updates as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__updates`\n    where field_name = 'assignee_id'\n\n), calculate_metrics as (\n    select\n        ticket_id,\n        field_name as assignee_id,\n        value,\n        ticket_created_date,\n        valid_starting_at,\n        lag(valid_starting_at) over (partition by ticket_id order by valid_starting_at) as previous_update,\n        lag(value) over (partition by ticket_id order by valid_starting_at) as previous_assignee,\n        first_value(valid_starting_at) over (partition by ticket_id order by valid_starting_at, ticket_id rows unbounded preceding) as first_agent_assignment_date,\n        first_value(value) over (partition by ticket_id order by valid_starting_at, ticket_id rows unbounded preceding) as first_assignee_id,\n        first_value(valid_starting_at) over (partition by ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_agent_assignment_date,\n        first_value(value) over (partition by ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_assignee_id,\n        count(value) over (partition by ticket_id) as assignee_stations_count\n    from assignee_updates\n\n), unassigned_time as (\n    select\n        ticket_id,\n        sum(case when assignee_id is not null and previous_assignee is null \n            then \n\n    datetime_diff(\n        cast(valid_starting_at as datetime),\n        cast(coalesce(previous_update, ticket_created_date) as datetime),\n        second\n    )\n\n   / 60\n            else 0\n                end) as ticket_unassigned_duration_calendar_minutes,\n        count(distinct value) as unique_assignee_count\n    from calculate_metrics\n\n    group by 1\n\n), window_group as (\n    select\n        calculate_metrics.ticket_id,\n        calculate_metrics.first_agent_assignment_date,\n        calculate_metrics.first_assignee_id,\n        calculate_metrics.last_agent_assignment_date,\n        calculate_metrics.last_assignee_id,\n        calculate_metrics.assignee_stations_count\n    from calculate_metrics\n\n    group by 1,2,3,4,5,6\n\n), final as (\n    select\n        window_group.*,\n        unassigned_time.unique_assignee_count,\n        unassigned_time.ticket_unassigned_duration_calendar_minutes\n    from window_group\n\n    left join unassigned_time\n        using(ticket_id)\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__ticket_historical_assignee`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.327113Z", "completed_at": "2024-05-01T20:35:33.328674Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.330227Z", "completed_at": "2024-05-01T20:35:33.330229Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006563901901245117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__ticket_historical_group", "compiled": true, "compiled_code": "with ticket_group_history as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__updates`\n    where field_name = 'group_id'\n\n), group_breakdown as (\n    select\n  \n        ticket_id,\n        valid_starting_at,\n        valid_ending_at,\n        value as group_id\n    from ticket_group_history\n\n), final as (\n    select\n        ticket_id,\n        count(group_id) as group_stations_count\n    from group_breakdown\n\n    group by 1\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__ticket_historical_group`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.331691Z", "completed_at": "2024-05-01T20:35:33.334715Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.335056Z", "completed_at": "2024-05-01T20:35:33.335059Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004605293273925781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__ticket_historical_satisfaction", "compiled": true, "compiled_code": "with satisfaction_updates as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__updates`\n    where field_name in ('satisfaction_score', 'satisfaction_comment', 'satisfaction_reason_code') \n\n), latest_reason as (\n    select\n        ticket_id,\n        first_value(value) over (partition by ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as latest_satisfaction_reason\n    from satisfaction_updates\n\n    where field_name = 'satisfaction_reason_code'\n\n), latest_comment as (\n    select\n        ticket_id,\n        first_value(value) over (partition by ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as latest_satisfaction_comment\n    from satisfaction_updates\n\n    where field_name = 'satisfaction_comment'\n\n), first_and_latest_score as (\n    select\n        ticket_id,\n        first_value(value) over (partition by ticket_id order by valid_starting_at, ticket_id rows unbounded preceding) as first_satisfaction_score,\n        first_value(value) over (partition by ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as latest_satisfaction_score\n    from satisfaction_updates\n\n    where field_name = 'satisfaction_score' and value != 'offered'\n\n), satisfaction_scores as (\n    select\n        ticket_id,\n        count(value) over (partition by ticket_id) as count_satisfaction_scores,\n        case when lag(value) over (partition by ticket_id order by valid_starting_at desc) = 'good' and value = 'bad'\n            then 1\n            else 0\n                end as good_to_bad_score,\n        case when lag(value) over (partition by ticket_id order by valid_starting_at desc) = 'bad' and value = 'good'\n            then 1\n            else 0\n                end as bad_to_good_score\n    from satisfaction_updates\n    where field_name = 'satisfaction_score'\n\n), score_group as (\n    select\n        ticket_id,\n        count_satisfaction_scores,\n        sum(good_to_bad_score) as total_good_to_bad_score,\n        sum(bad_to_good_score) as total_bad_to_good_score\n    from satisfaction_scores\n\n    group by 1, 2\n\n), window_group as (\n    select\n        satisfaction_updates.ticket_id,\n        latest_reason.latest_satisfaction_reason,\n        latest_comment.latest_satisfaction_comment,\n        first_and_latest_score.first_satisfaction_score,\n        first_and_latest_score.latest_satisfaction_score,\n        score_group.count_satisfaction_scores,\n        score_group.total_good_to_bad_score,\n        score_group.total_bad_to_good_score\n\n    from satisfaction_updates\n\n    left join latest_reason\n        on satisfaction_updates.ticket_id = latest_reason.ticket_id\n\n    left join latest_comment\n        on satisfaction_updates.ticket_id = latest_comment.ticket_id\n\n    left join first_and_latest_score\n        on satisfaction_updates.ticket_id = first_and_latest_score.ticket_id\n\n    left join score_group\n        on satisfaction_updates.ticket_id = score_group.ticket_id\n\n    group by 1, 2, 3, 4, 5, 6, 7, 8\n\n), final as (\n    select\n        ticket_id,\n        latest_satisfaction_reason,\n        latest_satisfaction_comment,\n        first_satisfaction_score,\n        latest_satisfaction_score,\n        case when count_satisfaction_scores > 0\n            then (count_satisfaction_scores - 1) --Subtracting one as the first score is always \"offered\".\n            else count_satisfaction_scores\n                end as count_satisfaction_scores,\n        case when total_good_to_bad_score > 0\n            then true\n            else false\n                end as is_good_to_bad_satisfaction_score,\n        case when total_bad_to_good_score > 0\n            then true\n            else false\n                end as is_bad_to_good_satisfaction_score\n    from window_group\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__ticket_historical_satisfaction`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.333103Z", "completed_at": "2024-05-01T20:35:33.335230Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.335907Z", "completed_at": "2024-05-01T20:35:33.335910Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004755973815917969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__ticket_historical_status", "compiled": true, "compiled_code": "-- To do -- can we delete ticket_status_counter and unique_status_counter?\n\nwith ticket_status_history as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__updates`\n    where field_name = 'status'\n\n)\n\n  select\n  \n    ticket_id,\n    valid_starting_at,\n    valid_ending_at,\n    \n\n    datetime_diff(\n        cast(coalesce(valid_ending_at, current_timestamp) as datetime),\n        cast(valid_starting_at as datetime),\n        minute\n    )\n\n   as status_duration_calendar_minutes,\n    value as status,\n    -- MIGHT BE ABLE TO DELETE ROWS BELOW\n    row_number() over (partition by ticket_id order by valid_starting_at) as ticket_status_counter,\n    row_number() over (partition by ticket_id, value order by valid_starting_at) as unique_status_counter\n\n  from ticket_status_history", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__ticket_historical_status`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.030812Z", "completed_at": "2024-05-01T20:35:33.424119Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.424577Z", "completed_at": "2024-05-01T20:35:33.424582Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3948349952697754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket_tag_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    ticket_id\n    \n as \n    \n    ticket_id\n    \n, \n    \n    \n    tag\n    \n as \n    \n    tag\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ticket_id,\n        \n        tag as tags\n        \n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket_tag`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.426182Z", "completed_at": "2024-05-01T20:35:33.428518Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.428933Z", "completed_at": "2024-05-01T20:35:33.428937Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0037021636962890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__ticket_aggregates", "compiled": true, "compiled_code": "with tickets as (\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket`\n\n), ticket_tags as (\n\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket_tag`\n\n), brands as (\n\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__brand`\n  \n), ticket_tag_aggregate as (\n  select\n    ticket_tags.ticket_id,\n    \n    string_agg(ticket_tags.tags, ', ')\n\n as ticket_tags\n  from ticket_tags\n  group by 1\n\n), final as (\n  select \n    tickets.*,\n    case when lower(tickets.type) = 'incident'\n      then true\n      else false\n        end as is_incident,\n    brands.name as ticket_brand_name,\n    ticket_tag_aggregate.ticket_tags\n  from tickets\n\n  left join ticket_tag_aggregate\n    using(ticket_id)\n\n  left join brands\n    on brands.brand_id = tickets.brand_id\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__ticket_aggregates`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.430423Z", "completed_at": "2024-05-01T20:35:33.434260Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.434644Z", "completed_at": "2024-05-01T20:35:33.434647Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005150318145751953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__sla_policy_applied", "compiled": true, "compiled_code": "-- step 1, figure out when sla was applied to tickets\n\n-- more on SLA policies here: https://support.zendesk.com/hc/en-us/articles/204770038-Defining-and-using-SLA-policies-Professional-and-Enterprise-\n-- SLA policies are calculated for next_reply_time, first_reply_time, agent_work_time, requester_wait_time.  If you're company uses other SLA metrics, and would like this\n-- package to support those, please reach out to the Fivetran team on Slack.\n\nwith ticket_field_history as (\n\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__updates`\n\n), sla_policy_name as (\n\n  select \n    *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__updates`\n  where field_name = ('sla_policy')\n\n), ticket as (\n\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__ticket_aggregates`\n\n), sla_policy_applied as (\n\n  select\n    ticket_field_history.ticket_id,\n    ticket.created_at as ticket_created_at,\n    ticket_field_history.valid_starting_at,\n    ticket.status as ticket_current_status,\n    ticket_field_history.field_name as metric,\n    case when ticket_field_history.field_name = 'first_reply_time' then row_number() over (partition by ticket_field_history.ticket_id, ticket_field_history.field_name order by ticket_field_history.valid_starting_at desc) else 1 end as latest_sla,\n    case when ticket_field_history.field_name = 'first_reply_time' then ticket.created_at else ticket_field_history.valid_starting_at end as sla_applied_at,\n    cast(\n\n \n  json_extract_scalar(ticket_field_history.value, '$.minutes')\n\n as INT64 ) as target,\n    \n\n \n  json_extract_scalar(ticket_field_history.value, '$.in_business_hours')\n\n = 'true' as in_business_hours\n  from ticket_field_history\n  join ticket\n    on ticket.ticket_id = ticket_field_history.ticket_id\n  where ticket_field_history.value is not null\n    and ticket_field_history.field_name in ('next_reply_time', 'first_reply_time', 'agent_work_time', 'requester_wait_time')\n\n), final as (\n  select\n    sla_policy_applied.*,\n    sla_policy_name.value as sla_policy_name\n  from sla_policy_applied\n  left join sla_policy_name\n    on sla_policy_name.ticket_id = sla_policy_applied.ticket_id\n      and sla_policy_applied.valid_starting_at >= sla_policy_name.valid_starting_at\n      and sla_policy_applied.valid_starting_at < coalesce(sla_policy_name.valid_ending_at, current_timestamp) \n  where sla_policy_applied.latest_sla = 1\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__sla_policy_applied`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.440208Z", "completed_at": "2024-05-01T20:35:33.445050Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.445770Z", "completed_at": "2024-05-01T20:35:33.445773Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010354757308959961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__reply_time_calendar_hours", "compiled": true, "compiled_code": "--REPLY TIME SLA\n-- step 2, figure out when the sla will breach for sla's in calendar hours. The calculation is relatively straightforward.\n\nwith sla_policy_applied as (\n\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__sla_policy_applied`\n\n), final as (\n  select\n    *,\n    \n\n        timestamp_add(sla_applied_at, interval  cast(target as INT64 ) minute)\n\n as sla_breach_at\n  from sla_policy_applied\n  where not in_business_hours\n    and metric in ('next_reply_time', 'first_reply_time')\n\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__reply_time_calendar_hours`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.437245Z", "completed_at": "2024-05-01T20:35:33.445233Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.445966Z", "completed_at": "2024-05-01T20:35:33.445969Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010991811752319336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__agent_work_time_filtered_statuses", "compiled": true, "compiled_code": "with agent_work_time_sla as (\n\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__sla_policy_applied`\n  where metric = 'agent_work_time'\n\n), ticket_historical_status as (\n\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__ticket_historical_status`\n    \n--This captures the statuses of the ticket while the agent work time sla was active for the ticket.\n), agent_work_time_filtered_statuses as (\n\n  select  \n    ticket_historical_status.ticket_id,\n    greatest(ticket_historical_status.valid_starting_at, agent_work_time_sla.sla_applied_at) as valid_starting_at,\n    coalesce(\n      ticket_historical_status.valid_ending_at, \n      \n\n        timestamp_add(current_timestamp, interval  30 day)\n\n ) as valid_ending_at, --assumes current status continues into the future. This is necessary to predict future SLA breaches (not just past).\n    ticket_historical_status.status as ticket_status,\n    agent_work_time_sla.sla_applied_at,\n    agent_work_time_sla.target,    \n    agent_work_time_sla.sla_policy_name,\n    agent_work_time_sla.ticket_created_at,\n    agent_work_time_sla.in_business_hours\n  from ticket_historical_status\n  join agent_work_time_sla\n    on ticket_historical_status.ticket_id = agent_work_time_sla.ticket_id\n  where ticket_historical_status.status in ('new', 'open') -- these are the only statuses that count as \"agent work time\"\n  and sla_applied_at < valid_ending_at\n\n)\nselect *\nfrom agent_work_time_filtered_statuses", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__agent_work_time_filtered_statuses`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.442979Z", "completed_at": "2024-05-01T20:35:33.446152Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.447281Z", "completed_at": "2024-05-01T20:35:33.447283Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011316061019897461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__requester_wait_time_filtered_statuses", "compiled": true, "compiled_code": "with requester_wait_time_sla as (\n\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__sla_policy_applied`\n  where metric = 'requester_wait_time'\n\n), ticket_historical_status as (\n\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__ticket_historical_status`\n    \n--This captures the statuses of the ticket while the requester wait time sla was active for the ticket.\n), requester_wait_time_filtered_statuses as (\n\n  select  \n    ticket_historical_status.ticket_id,\n    greatest(ticket_historical_status.valid_starting_at, requester_wait_time_sla.sla_applied_at) as valid_starting_at,\n    coalesce(\n      ticket_historical_status.valid_ending_at, \n      \n\n        timestamp_add(current_timestamp, interval  30 day)\n\n ) as valid_ending_at, --assumes current status continues into the future. This is necessary to predict future SLA breaches (not just past).\n    ticket_historical_status.status as ticket_status,\n    requester_wait_time_sla.sla_applied_at,\n    requester_wait_time_sla.target,\n    requester_wait_time_sla.sla_policy_name,\n    requester_wait_time_sla.ticket_created_at,\n    requester_wait_time_sla.in_business_hours\n  from ticket_historical_status\n  join requester_wait_time_sla\n    on ticket_historical_status.ticket_id = requester_wait_time_sla.ticket_id\n  where ticket_historical_status.status in ('new', 'open', 'on-hold', 'hold') -- these are the only statuses that count as \"requester wait time\"\n  and sla_applied_at < valid_ending_at\n\n)\nselect *\nfrom requester_wait_time_filtered_statuses", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__requester_wait_time_filtered_statuses`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.448577Z", "completed_at": "2024-05-01T20:35:33.452766Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.453077Z", "completed_at": "2024-05-01T20:35:33.453080Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005433082580566406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__agent_work_time_calendar_hours", "compiled": true, "compiled_code": "-- Calculate breach time for agent work time, calendar hours\nwith agent_work_time_filtered_statuses as (\n\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__agent_work_time_filtered_statuses`\n  where not in_business_hours\n\n), agent_work_time_calendar_minutes as (\n\n  select \n    *,\n    \n\n    datetime_diff(\n        cast(valid_ending_at as datetime),\n        cast(valid_starting_at as datetime),\n        minute\n    )\n\n   as calendar_minutes,\n    sum(\n\n    datetime_diff(\n        cast(valid_ending_at as datetime),\n        cast(valid_starting_at as datetime),\n        minute\n    )\n\n   ) \n      over (partition by ticket_id, sla_applied_at order by valid_starting_at rows between unbounded preceding and current row) as running_total_calendar_minutes\n  from agent_work_time_filtered_statuses\n\n), agent_work_time_calendar_minutes_flagged as (\n\nselect \n  agent_work_time_calendar_minutes.*,\n  target - running_total_calendar_minutes as remaining_target_minutes,\n  case when (target - running_total_calendar_minutes) < 0 \n      and \n        (lag(target - running_total_calendar_minutes) over\n        (partition by ticket_id, sla_applied_at order by valid_starting_at) >= 0 \n        or \n        lag(target - running_total_calendar_minutes) over\n        (partition by ticket_id, sla_applied_at order by valid_starting_at) is null) \n        then true else false end as is_breached_during_schedule\n        \nfrom  agent_work_time_calendar_minutes\n\n), final as (\n  select\n    *,\n    (remaining_target_minutes + calendar_minutes) as breach_minutes,\n    \n\n        timestamp_add(valid_starting_at, interval  (remaining_target_minutes + calendar_minutes) minute)\n\n as sla_breach_at\n  from agent_work_time_calendar_minutes_flagged\n\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__agent_work_time_calendar_hours`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.450940Z", "completed_at": "2024-05-01T20:35:33.453616Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.453959Z", "completed_at": "2024-05-01T20:35:33.453962Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0037190914154052734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__requester_wait_time_calendar_hours", "compiled": true, "compiled_code": "-- Calculate breach time for requester wait time, calendar hours\nwith requester_wait_time_filtered_statuses as (\n\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__requester_wait_time_filtered_statuses`\n  where not in_business_hours\n\n), requester_wait_time_calendar_minutes as (\n\n  select \n    *,\n    \n\n    datetime_diff(\n        cast(valid_ending_at as datetime),\n        cast(valid_starting_at as datetime),\n        minute\n    )\n\n   as calendar_minutes,\n    sum(\n\n    datetime_diff(\n        cast(valid_ending_at as datetime),\n        cast(valid_starting_at as datetime),\n        minute\n    )\n\n   ) \n      over (partition by ticket_id, sla_applied_at order by valid_starting_at rows between unbounded preceding and current row) as running_total_calendar_minutes\n  from requester_wait_time_filtered_statuses\n\n), requester_wait_time_calendar_minutes_flagged as (\n\nselect \n  requester_wait_time_calendar_minutes.*,\n  target - running_total_calendar_minutes as remaining_target_minutes,\n  case when (target - running_total_calendar_minutes) < 0 \n      and \n        (lag(target - running_total_calendar_minutes) over\n        (partition by ticket_id, sla_applied_at order by valid_starting_at) >= 0 \n        or \n        lag(target - running_total_calendar_minutes) over\n        (partition by ticket_id, sla_applied_at order by valid_starting_at) is null) \n        then true else false end as is_breached_during_schedule\n        \nfrom  requester_wait_time_calendar_minutes\n\n), final as (\n  select\n    *,\n    (remaining_target_minutes + calendar_minutes) as breach_minutes,\n    \n\n        timestamp_add(valid_starting_at, interval  (remaining_target_minutes + calendar_minutes) minute)\n\n as sla_breach_at\n  from requester_wait_time_calendar_minutes_flagged\n\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__requester_wait_time_calendar_hours`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.137312Z", "completed_at": "2024-05-01T20:35:33.593063Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.593565Z", "completed_at": "2024-05-01T20:35:33.593569Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.45752501487731934, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__user", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__user_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    alias\n    \n as \n    \n    alias\n    \n, \n    \n    \n    authenticity_token\n    \n as \n    \n    authenticity_token\n    \n, \n    \n    \n    chat_only\n    \n as \n    \n    chat_only\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    details\n    \n as \n    \n    details\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    external_id\n    \n as \n    \n    external_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_login_at\n    \n as \n    \n    last_login_at\n    \n, \n    \n    \n    locale\n    \n as \n    \n    locale\n    \n, \n    \n    \n    locale_id\n    \n as \n    \n    locale_id\n    \n, \n    \n    \n    moderator\n    \n as \n    \n    moderator\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    only_private_comments\n    \n as \n    \n    only_private_comments\n    \n, \n    \n    \n    organization_id\n    \n as \n    \n    organization_id\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    remote_photo_url\n    \n as \n    \n    remote_photo_url\n    \n, \n    \n    \n    restricted_agent\n    \n as \n    \n    restricted_agent\n    \n, \n    \n    \n    role\n    \n as \n    \n    role\n    \n, \n    \n    \n    shared\n    \n as \n    \n    shared\n    \n, \n    \n    \n    shared_agent\n    \n as \n    \n    shared_agent\n    \n, \n    \n    \n    signature\n    \n as \n    \n    signature\n    \n, \n    \n    \n    suspended\n    \n as \n    \n    suspended\n    \n, \n    \n    \n    ticket_restriction\n    \n as \n    \n    ticket_restriction\n    \n, \n    \n    \n    time_zone\n    \n as \n    \n    time_zone\n    \n, \n    \n    \n    two_factor_auth_enabled\n    \n as \n    \n    two_factor_auth_enabled\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n, \n    \n    \n    verified\n    \n as \n    \n    verified\n    \n\n\n\n        \n    from base\n),\n\nfinal as ( \n    \n    select \n        id as user_id,\n        external_id,\n        _fivetran_synced,\n        cast(last_login_at as timestamp) as last_login_at,\n        cast(created_at as timestamp) as created_at,\n        cast(updated_at as timestamp) as updated_at,\n        email,\n        name,\n        organization_id,\n        phone,\n        role,\n        ticket_restriction,\n        time_zone,\n        locale,\n        active as is_active,\n        suspended as is_suspended\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__user`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.597441Z", "completed_at": "2024-05-01T20:35:33.608255Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.609087Z", "completed_at": "2024-05-01T20:35:33.609091Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014928102493286133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__user_aggregates", "compiled": true, "compiled_code": "with users as (\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__user`\n\n--If you use user tags this will be included, if not it will be ignored.\n\n\n), final as (\n  select \n    users.*\n\n    --If you use user tags this will be included, if not it will be ignored.\n    \n  from users\n\n  --If you use user tags this will be included, if not it will be ignored.\n  \n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__user_aggregates`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.600753Z", "completed_at": "2024-05-01T20:35:33.608863Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.610664Z", "completed_at": "2024-05-01T20:35:33.610668Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015794992446899414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__user_user_id.102d572926", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__user`\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.603240Z", "completed_at": "2024-05-01T20:35:33.609295Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.610965Z", "completed_at": "2024-05-01T20:35:33.610969Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01561117172241211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.unique_stg_zendesk__user_user_id.3d3e346b11", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select user_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__user`\n  where user_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.606619Z", "completed_at": "2024-05-01T20:35:33.609504Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.611343Z", "completed_at": "2024-05-01T20:35:33.611346Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015945911407470703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__comments_enriched", "compiled": true, "compiled_code": "with ticket_comment as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__updates`\n    where field_name = 'comment'\n\n), users as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__user`\n\n), joined as (\n\n    select \n\n        ticket_comment.*,\n        case when commenter.role = 'end-user' then 'external_comment'\n            when commenter.role in ('agent','admin') then 'internal_comment'\n            else 'unknown' end as commenter_role\n    \n    from ticket_comment\n    \n    join users as commenter\n        on commenter.user_id = ticket_comment.user_id\n\n), add_previous_commenter_role as (\n    /*\n    In int_zendesk__ticket_reply_times we will only be focusing on reply times between public tickets.\n    The below union explicitly identifies the previous commenter roles of public and not public comments.\n    */\n    select\n        *,\n        coalesce(\n            lag(commenter_role) over (partition by ticket_id order by valid_starting_at, commenter_role)\n            , 'first_comment') \n            as previous_commenter_role\n    from joined\n    where is_public\n\n    union all\n\n    select\n        *,\n        'non_public_comment' as previous_commenter_role\n    from joined\n    where not is_public\n)\n\nselect \n    *,\n    first_value(valid_starting_at) over (partition by ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_comment_added_at,\n    sum(case when not is_public then 1 else 0 end) over (partition by ticket_id order by valid_starting_at rows between unbounded preceding and current row) as previous_internal_comment_count\nfrom add_previous_commenter_role", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk`.`int_zendesk__comments_enriched`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.618052Z", "completed_at": "2024-05-01T20:35:33.629539Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.631123Z", "completed_at": "2024-05-01T20:35:33.631126Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01964282989501953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.zendesk__ticket_enriched", "compiled": true, "compiled_code": "-- this model enriches the ticket table with ticket-related dimensions.  This table will not include any metrics.\n-- for metrics, see ticket_metrics!\n\nwith ticket as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__ticket_aggregates`\n\n--If you use using_ticket_form_history this will be included, if not it will be ignored.\n\n), latest_ticket_form as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__latest_ticket_form`\n\n\n), latest_satisfaction_ratings as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__ticket_historical_satisfaction`\n\n), users as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__user_aggregates`\n\n), requester_updates as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__requester_updates`\n\n), assignee_updates as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__assignee_updates`\n\n), ticket_group as (\n    \n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__group`\n\n), organization as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__organization_aggregates`\n\n), joined as (\n\n    select \n\n        ticket.*,\n\n        --If you use using_ticket_form_history this will be included, if not it will be ignored.\n        \n        latest_ticket_form.name as ticket_form_name,\n        \n\n        latest_satisfaction_ratings.count_satisfaction_scores as ticket_total_satisfaction_scores,\n        latest_satisfaction_ratings.first_satisfaction_score as ticket_first_satisfaction_score,\n        latest_satisfaction_ratings.latest_satisfaction_score as ticket_satisfaction_score,\n        latest_satisfaction_ratings.latest_satisfaction_comment as ticket_satisfaction_comment,\n        latest_satisfaction_ratings.latest_satisfaction_reason as ticket_satisfaction_reason,\n        latest_satisfaction_ratings.is_good_to_bad_satisfaction_score,\n        latest_satisfaction_ratings.is_bad_to_good_satisfaction_score,\n\n        --If you use using_domain_names tags this will be included, if not it will be ignored.\n        \n        organization.domain_names as ticket_organization_domain_names,\n        requester_org.domain_names as requester_organization_domain_names,\n        \n\n        requester.external_id as requester_external_id,\n        requester.created_at as requester_created_at,\n        requester.updated_at as requester_updated_at,\n        requester.role as requester_role,\n        requester.email as requester_email,\n        requester.name as requester_name,\n        requester.is_active as is_requester_active,\n        requester.locale as requester_locale,\n        requester.time_zone as requester_time_zone,\n        coalesce(requester_updates.total_updates, 0) as requester_ticket_update_count,\n        requester_updates.last_updated as requester_ticket_last_update_at,\n        requester.last_login_at as requester_last_login_at,\n        requester.organization_id as requester_organization_id,\n        requester_org.name as requester_organization_name,\n\n        --If you use organization tags this will be included, if not it will be ignored.\n        \n        requester_org.external_id as requester_organization_external_id,\n        requester_org.created_at as requester_organization_created_at,\n        requester_org.updated_at as requester_organization_updated_at,\n        submitter.external_id as submitter_external_id,\n        submitter.role as submitter_role,\n        case when submitter.role in ('agent','admin') \n            then true \n            else false\n                end as is_agent_submitted,\n        submitter.email as submitter_email,\n        submitter.name as submitter_name,\n        submitter.is_active as is_submitter_active,\n        submitter.locale as submitter_locale,\n        submitter.time_zone as submitter_time_zone,\n        assignee.external_id as assignee_external_id,\n        assignee.role as assignee_role,\n        assignee.email as assignee_email,\n        assignee.name as assignee_name,\n        assignee.is_active as is_assignee_active,\n        assignee.locale as assignee_locale,\n        assignee.time_zone as assignee_time_zone,\n        coalesce(assignee_updates.total_updates, 0) as assignee_ticket_update_count,\n        assignee_updates.last_updated as assignee_ticket_last_update_at,\n        assignee.last_login_at as assignee_last_login_at,\n        ticket_group.name as group_name,\n        organization.name as organization_name\n\n        --If you use using_user_tags this will be included, if not it will be ignored.\n        \n\n    \n    from ticket\n\n    --Requester Joins\n    join users as requester\n        on requester.user_id = ticket.requester_id\n\n    left join organization as requester_org\n        on requester_org.organization_id = requester.organization_id\n\n    left join requester_updates\n        on requester_updates.ticket_id = ticket.ticket_id\n            and requester_updates.requester_id = ticket.requester_id\n    \n    --Submitter Joins\n    join users as submitter\n        on submitter.user_id = ticket.submitter_id\n    \n    --Assignee Joins\n    left join users as assignee\n        on assignee.user_id = ticket.assignee_id\n\n    left join assignee_updates\n        on assignee_updates.ticket_id = ticket.ticket_id\n            and assignee_updates.assignee_id = ticket.assignee_id\n\n    --Ticket, Org, and Brand Joins\n    left join ticket_group\n        on ticket_group.group_id = ticket.group_id\n\n    --If you use using_ticket_form_history this will be included, if not it will be ignored.\n    \n    left join latest_ticket_form\n        on latest_ticket_form.ticket_form_id = ticket.ticket_form_id\n    \n\n    left join organization\n        on organization.organization_id = ticket.organization_id\n\n    left join latest_satisfaction_ratings\n        on latest_satisfaction_ratings.ticket_id = ticket.ticket_id\n)\n\nselect *\nfrom joined", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk`.`zendesk__ticket_enriched`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.621653Z", "completed_at": "2024-05-01T20:35:33.630084Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.632865Z", "completed_at": "2024-05-01T20:35:33.632867Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.019572973251342773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__reply_time_combined", "compiled": true, "compiled_code": "with reply_time_calendar_hours_sla as (\n  \n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__reply_time_calendar_hours`\n\n\n\n), ticket_updates as (\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__updates`\n\n), users as (\n\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__user_aggregates`\n\n), reply_time_breached_at as (\n\n  select \n    ticket_id,\n    sla_policy_name,\n    metric,\n    ticket_created_at,\n    sla_applied_at,\n    sla_applied_at as sla_schedule_start_at,\n    cast(null as timestamp) as sla_schedule_end_at,\n    cast(null as numeric) as sum_lapsed_business_minutes,\n    target,\n    in_business_hours,\n    sla_breach_at,\n    cast(null as numeric) as week_number,\n    cast(null as numeric) as total_schedule_weekly_business_minutes\n  from reply_time_calendar_hours_sla\n\n\n\n-- Now that we have the breach time, see when the first reply after the sla policy was applied took place.\n), ticket_solved_times as (\n  select\n    ticket_id,\n    valid_starting_at as solved_at\n  from ticket_updates\n  where field_name = 'status'\n  and value in ('solved','closed')\n\n), reply_time as (\n  select \n    ticket_comment.ticket_id,\n    ticket_comment.valid_starting_at as reply_at,\n    commenter.role\n  from ticket_updates as ticket_comment\n  join users as commenter\n    on commenter.user_id = ticket_comment.user_id\n  where field_name = 'comment' \n    and ticket_comment.is_public\n    and commenter.role in ('agent','admin')\n\n), reply_time_breached_at_with_next_reply_timestamp as (\n\n  select \n    reply_time_breached_at.ticket_id,\n    reply_time_breached_at.sla_policy_name,\n    reply_time_breached_at.metric,\n    reply_time_breached_at.ticket_created_at,\n    reply_time_breached_at.sla_applied_at,\n    reply_time_breached_at.sum_lapsed_business_minutes,\n    reply_time_breached_at.target,\n    reply_time_breached_at.in_business_hours,\n    reply_time_breached_at.sla_breach_at,\n    reply_time_breached_at.week_number,\n    min(reply_time_breached_at.sla_schedule_start_at) as sla_schedule_start_at,\n    min(reply_time_breached_at.sla_schedule_end_at) as sla_schedule_end_at,\n    min(reply_at) as agent_reply_at,\n    min(solved_at) as next_solved_at\n  from reply_time_breached_at\n  left join reply_time\n    on reply_time.ticket_id = reply_time_breached_at.ticket_id\n    and reply_time.reply_at > reply_time_breached_at.sla_applied_at\n  left join ticket_solved_times\n    on reply_time_breached_at.ticket_id = ticket_solved_times.ticket_id\n    and ticket_solved_times.solved_at > reply_time_breached_at.sla_applied_at\n  group by 1,2,3,4,5,6,7,8,9,10\n\n), lagging_time_block as (\n  select\n    *,\n    lead(sla_schedule_start_at) over (partition by ticket_id, sla_policy_name, metric, sla_applied_at order by sla_schedule_start_at) as next_schedule_start,\n    min(sla_breach_at) over (partition by sla_policy_name, metric, sla_applied_at order by sla_schedule_start_at rows unbounded preceding) as first_sla_breach_at,\n\t\tcoalesce(lag(sum_lapsed_business_minutes) over (partition by sla_policy_name, metric, sla_applied_at order by sla_schedule_start_at), 0) as sum_lapsed_business_minutes_new,\n    \n\n    datetime_diff(\n        cast(agent_reply_at as datetime),\n        cast(sla_schedule_start_at as datetime),\n        second\n    )\n\n   / 60 as total_runtime_minutes -- total minutes from sla_schedule_start_at and agent reply time, before taking into account SLA end time\n  from reply_time_breached_at_with_next_reply_timestamp\n\n), filtered_reply_times as (\n  select\n    *\n  from lagging_time_block\n  where (\n    in_business_hours\n      and ((\n        agent_reply_at >= sla_schedule_start_at and agent_reply_at <= sla_schedule_end_at) -- ticket is replied to between a schedule window\n        or (agent_reply_at < sla_schedule_start_at and sum_lapsed_business_minutes_new = 0 and sla_breach_at = first_sla_breach_at) -- ticket is replied to before a schedule window and no business minutes have been spent on it\n        or (agent_reply_at is null and next_solved_at >= sla_schedule_start_at and next_solved_at < next_schedule_start) -- There are no reply times, but the ticket is closed and we should capture the closed date as the first and/or next reply time if there is not one preceding.\n        or (next_solved_at is null and agent_reply_at is null and current_timestamp() >= sla_schedule_start_at and (current_timestamp() < next_schedule_start or next_schedule_start is null)) -- ticket is not replied to and therefore active. But only bring through the active SLA record that is most recent (after the last SLA schedule starts but before the next, or if there does not exist a next SLA schedule start time)  \n        or (agent_reply_at > sla_schedule_end_at and (agent_reply_at < next_schedule_start or next_schedule_start is null)) -- ticket is replied to outside sla schedule hours\n      ) and sla_schedule_start_at <= current_timestamp()) -- To help limit the data we do not want to bring through any schedule rows in the future.\n    or not in_business_hours\n\n), reply_time_breached_at_remove_old_sla as (\n  select\n    *,\n    current_timestamp() as current_time_check,\n    lead(sla_applied_at) over (partition by ticket_id, metric, in_business_hours order by sla_applied_at) as updated_sla_policy_starts_at,\n    case when \n      lead(sla_applied_at) over (partition by ticket_id, metric, in_business_hours order by sla_applied_at) --updated sla policy start at time\n      < sla_breach_at then true else false end as is_stale_sla_policy,\n    case when (sla_breach_at < agent_reply_at and sla_breach_at < next_solved_at)\n                or (sla_breach_at < agent_reply_at and next_solved_at is null)\n                or (agent_reply_at is null and sla_breach_at < next_solved_at)\n                or (agent_reply_at is null and next_solved_at is null)\n      then true\n      else false\n        end as is_sla_breached,\n    sum_lapsed_business_minutes_new + total_runtime_minutes as total_new_minutes -- add total runtime to sum_lapsed_business_minutes_new (the sum_lapsed_business_minutes from prior row)\n  from filtered_reply_times\n\n), reply_time_breach as ( \n  select  \n    *,\n    case when is_sla_breached\n      then sla_breach_at -- If the SLA was breached then record that time as the breach \n      else coalesce(agent_reply_at, next_solved_at) -- If the SLA was not breached then record either the agent_reply_at or next_solve_at as the breach event time as it was achieved.\n    end as sla_update_at,\n    case when total_runtime_minutes < 0 -- agent has already replied to prior to this SLA schedule\n        then 0 -- so don't add new minutes to the SLA\n      when total_new_minutes > sum_lapsed_business_minutes -- if total runtime, regardless of when the SLA schedule ended, is more than the total lapsed business minutes, that means the agent replied after the SLA schedule\n          then sum_lapsed_business_minutes -- the elapsed time after the SLA end time should not be calculated as part of the business minutes, therefore sla_elapsed_time should only be sum_lapsed_business_minutes\n      else sum_lapsed_business_minutes_new + (\n\n    datetime_diff(\n        cast(coalesce(agent_reply_at, next_solved_at, current_time_check) as datetime),\n        cast(sla_schedule_start_at as datetime),\n        second\n    )\n\n   / 60) -- otherwise, the sla_elapsed_time will be sum_lapsed_business_minutes_new (the prior record's sum_lapsed_business_minutes) plus the minutes between SLA schedule start and agent_reply_time. If the agent hasn't replied yet, then the minute counter is still running, hence the coalesce of agent_reply_time and current_time_check.\n    end as sla_elapsed_time\n  from reply_time_breached_at_remove_old_sla \n)\n\nselect *\nfrom reply_time_breach", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__reply_time_combined`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.627513Z", "completed_at": "2024-05-01T20:35:33.630263Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.633049Z", "completed_at": "2024-05-01T20:35:33.633052Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016564130783081055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__comment_metrics", "compiled": true, "compiled_code": "with ticket_comments as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk`.`int_zendesk__comments_enriched`\n),\n\ncomment_counts as (\n    select\n        ticket_id,\n        last_comment_added_at,\n        sum(case when commenter_role = 'internal_comment' and is_public = true\n            then 1\n            else 0\n                end) as count_public_agent_comments,\n        sum(case when commenter_role = 'internal_comment'\n            then 1\n            else 0\n                end) as count_agent_comments,\n        sum(case when commenter_role = 'external_comment'\n            then 1\n            else 0\n                end) as count_end_user_comments,\n        sum(case when is_public = true\n            then 1\n            else 0\n                end) as count_public_comments,\n        sum(case when is_public = false\n            then 1\n            else 0\n                end) as count_internal_comments,\n        count(*) as total_comments,\n        count(distinct case when commenter_role = 'internal_comment'\n            then user_id\n                end) as count_ticket_handoffs,\n        sum(case when commenter_role = 'internal_comment' and is_public = true and previous_commenter_role != 'first_comment'\n            then 1\n            else 0\n                end) as count_agent_replies\n    from ticket_comments\n\n    group by 1, 2\n),\n\nfinal as (\n    select\n        *,\n        count_public_agent_comments = 1 as is_one_touch_resolution,\n        count_public_agent_comments = 2 as is_two_touch_resolution\n    from comment_counts\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__comment_metrics`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.631314Z", "completed_at": "2024-05-01T20:35:33.634318Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.636018Z", "completed_at": "2024-05-01T20:35:33.636021Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006967067718505859, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__ticket_reply_times", "compiled": true, "compiled_code": "with ticket_public_comments as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk`.`int_zendesk__comments_enriched`\n    where is_public\n\n), end_user_comments as (\n  \n  select \n    ticket_id,\n    valid_starting_at as end_user_comment_created_at,\n    ticket_created_date,\n    commenter_role,\n    previous_internal_comment_count,\n    previous_commenter_role = 'first_comment' as is_first_comment\n  from ticket_public_comments \n  where (commenter_role = 'external_comment'\n    and ticket_public_comments.previous_commenter_role != 'external_comment') -- we only care about net new end user comments\n    or previous_commenter_role = 'first_comment' -- We also want to take into consideration internal first comment replies\n\n), reply_timestamps as (  \n\n  select\n    end_user_comments.ticket_id,\n    -- If the commentor was internal, a first comment, and had previous non public internal comments then we want the ticket created date to be the end user comment created date\n    -- Otherwise we will want to end user comment created date\n    case when is_first_comment then end_user_comments.ticket_created_date else end_user_comments.end_user_comment_created_at end as end_user_comment_created_at,\n    end_user_comments.is_first_comment,\n    min(case when is_first_comment \n        and end_user_comments.commenter_role != 'external_comment' \n        and (end_user_comments.previous_internal_comment_count > 0)\n          then end_user_comments.end_user_comment_created_at \n        else agent_comments.valid_starting_at end) as agent_responded_at\n  from end_user_comments\n  left join ticket_public_comments as agent_comments\n    on agent_comments.ticket_id = end_user_comments.ticket_id\n    and agent_comments.commenter_role = 'internal_comment'\n    and agent_comments.valid_starting_at > end_user_comments.end_user_comment_created_at\n  group by 1,2,3\n\n)\n\n  select\n    *,\n    (\n\n    datetime_diff(\n        cast(agent_responded_at as datetime),\n        cast(end_user_comment_created_at as datetime),\n        second\n    )\n\n   / 60) as reply_time_calendar_minutes\n  from reply_timestamps\n  order by 1,2", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk`.`int_zendesk__ticket_reply_times`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.643040Z", "completed_at": "2024-05-01T20:35:33.649459Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.650841Z", "completed_at": "2024-05-01T20:35:33.650844Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015945911407470703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk.unique_zendesk__ticket_enriched_ticket_id.7c3c6ca9ef", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select ticket_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk`.`zendesk__ticket_enriched`\n  where ticket_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.641270Z", "completed_at": "2024-05-01T20:35:33.649651Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.651012Z", "completed_at": "2024-05-01T20:35:33.651015Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016532182693481445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk.not_null_zendesk__ticket_enriched_ticket_id.e3efc5bf0a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticket_id\nfrom `dbt-package-testing`.`zz_dbt_renee_zendesk`.`zendesk__ticket_enriched`\nwhere ticket_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.645371Z", "completed_at": "2024-05-01T20:35:33.650468Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.652226Z", "completed_at": "2024-05-01T20:35:33.652230Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00797891616821289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.zendesk__sla_policies", "compiled": true, "compiled_code": "--final step where we union together all of the reply time, agent work time, and requester wait time sla's\n\nwith reply_time_sla as (\n\n  select * \n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__reply_time_combined`\n\n), agent_work_calendar_sla as (\n\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__agent_work_time_calendar_hours`\n\n), requester_wait_calendar_sla as (\n\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__requester_wait_time_calendar_hours`\n\n\n\n), all_slas_unioned as (\n  select\n    ticket_id,\n    sla_policy_name,\n    metric,\n    sla_applied_at,\n    target,\n    in_business_hours,\n    sla_update_at as sla_breach_at,\n    sla_elapsed_time,\n    is_sla_breached\n  from reply_time_sla\n\nunion all\n\n  select\n    ticket_id,\n    sla_policy_name,\n    'agent_work_time' as metric,\n    sla_applied_at,\n    target,\n    false as in_business_hours,\n    max(sla_breach_at) as sla_breach_at,\n    max(running_total_calendar_minutes) as sla_elapsed_time,\n    \n\n    max( is_breached_during_schedule )\n\n\n  from agent_work_calendar_sla\n\n  group by 1, 2, 3, 4, 5, 6\n\nunion all\n\n  select\n    ticket_id,\n    sla_policy_name,\n    'requester_wait_time' as metric,\n    sla_applied_at,\n    target,\n    false as in_business_hours,\n    max(sla_breach_at) as sla_breach_at,\n    max(running_total_calendar_minutes) as sla_elapsed_time,\n    \n\n    max( is_breached_during_schedule )\n\n\n  from requester_wait_calendar_sla\n\n  group by 1, 2, 3, 4, 5, 6\n\n\n\n\n)\n\nselect \n  to_hex(md5(cast(coalesce(cast(ticket_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(metric as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sla_applied_at as string), '_dbt_utils_surrogate_key_null_') as string))) as sla_event_id,\n  ticket_id,\n  sla_policy_name,\n  metric,\n  sla_applied_at,\n  target,\n  in_business_hours,\n  sla_breach_at,\n  case when sla_elapsed_time is null\n    then (\n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(sla_applied_at as datetime),\n        second\n    )\n\n   / 60)  --This will create an entry for active sla's\n    else sla_elapsed_time\n      end as sla_elapsed_time,\n  sla_breach_at > current_timestamp as is_active_sla,\n  case when (sla_breach_at > current_timestamp)\n    then null\n    else is_sla_breached\n      end as is_sla_breach\nfrom all_slas_unioned", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk`.`zendesk__sla_policies`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.653082Z", "completed_at": "2024-05-01T20:35:33.659776Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.662445Z", "completed_at": "2024-05-01T20:35:33.662449Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011575937271118164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__ticket_reply_times_calendar", "compiled": true, "compiled_code": "with ticket as (\n\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket`\n\n), ticket_reply_times as (\n\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk`.`int_zendesk__ticket_reply_times`\n\n)\n\nselect\n\n  ticket.ticket_id,\n  sum(case when is_first_comment then reply_time_calendar_minutes\n    else null end) as first_reply_time_calendar_minutes,\n  sum(reply_time_calendar_minutes) as total_reply_time_calendar_minutes --total combined time the customer waits for internal response\n  \nfrom ticket\nleft join ticket_reply_times\n  using (ticket_id)\n\ngroup by 1", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk`.`int_zendesk__ticket_reply_times_calendar`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.660487Z", "completed_at": "2024-05-01T20:35:33.663434Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.664985Z", "completed_at": "2024-05-01T20:35:33.664988Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02636098861694336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk.unique_zendesk__sla_policies_sla_event_id.5daff4d2bd", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select sla_event_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk`.`zendesk__sla_policies`\n  where sla_event_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.665164Z", "completed_at": "2024-05-01T20:35:33.681685Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.681965Z", "completed_at": "2024-05-01T20:35:33.681967Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01862812042236328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.zendesk__ticket_metrics", "compiled": true, "compiled_code": "with  __dbt__cte__int_zendesk__ticket_resolution_times_calendar as (\nwith historical_solved_status as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__ticket_historical_status`\n    where status = 'solved'\n\n), ticket as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket`\n\n), ticket_historical_assignee as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__ticket_historical_assignee`\n\n), ticket_historical_group as (\n\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__ticket_historical_group`\n\n), solved_times as (\n  \n  select\n  \n    ticket_id,\n    min(valid_starting_at) as first_solved_at,\n    max(valid_starting_at) as last_solved_at,\n    count(status) as solved_count \n\n  from historical_solved_status\n  group by 1\n\n)\n\n  select\n\n    ticket.ticket_id,\n    ticket.created_at,\n    solved_times.first_solved_at,\n    solved_times.last_solved_at,\n    ticket_historical_assignee.unique_assignee_count,\n    ticket_historical_assignee.assignee_stations_count,\n    ticket_historical_group.group_stations_count,\n    ticket_historical_assignee.first_assignee_id,\n    ticket_historical_assignee.last_assignee_id,\n    ticket_historical_assignee.first_agent_assignment_date,\n    ticket_historical_assignee.last_agent_assignment_date,\n    ticket_historical_assignee.ticket_unassigned_duration_calendar_minutes,\n    solved_times.solved_count as total_resolutions,\n    case when solved_times.solved_count <= 1\n      then 0\n      else solved_times.solved_count - 1 --subtracting one as the first solve is not a reopen.\n        end as count_reopens,\n\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket_historical_assignee.first_agent_assignment_date as datetime),\n        minute\n    )\n\n   as first_assignment_to_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket_historical_assignee.last_agent_assignment_date as datetime),\n        minute\n    )\n\n   as last_assignment_to_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.first_solved_at as datetime),\n        cast(ticket.created_at as datetime),\n        minute\n    )\n\n   as first_resolution_calendar_minutes,\n    \n\n    datetime_diff(\n        cast(solved_times.last_solved_at as datetime),\n        cast(ticket.created_at as datetime),\n        minute\n    )\n\n   as final_resolution_calendar_minutes\n\n  from ticket\n\n  left join ticket_historical_assignee\n    using(ticket_id)\n\n  left join ticket_historical_group\n    using(ticket_id)\n\n  left join solved_times\n    using(ticket_id)\n),  __dbt__cte__int_zendesk__ticket_work_time_calendar as (\nwith ticket_historical_status as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__ticket_historical_status`\n\n), calendar_minutes as (\n  \n    select \n        ticket_id,\n        status,\n        case when status in ('pending') then status_duration_calendar_minutes\n            else 0 end as agent_wait_time_in_minutes,\n        case when status in ('new', 'open', 'hold') then status_duration_calendar_minutes\n            else 0 end as requester_wait_time_in_minutes,\n        case when status in ('new', 'open', 'hold', 'pending') then status_duration_calendar_minutes \n            else 0 end as solve_time_in_minutes, \n        case when status in ('new', 'open') then status_duration_calendar_minutes\n            else 0 end as agent_work_time_in_minutes,\n        case when status in ('hold') then status_duration_calendar_minutes\n            else 0 end as on_hold_time_in_minutes,\n        case when status = 'new' then status_duration_calendar_minutes\n            else 0 end as new_status_duration_minutes,\n        case when status = 'open' then status_duration_calendar_minutes\n            else 0 end as open_status_duration_minutes,\n        case when status = 'deleted' then 1\n            else 0 end as ticket_deleted,\n        first_value(valid_starting_at) over (partition by ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_status_assignment_date,\n        case when lag(status) over (partition by ticket_id order by valid_starting_at) = 'deleted' and status != 'deleted'\n            then 1\n            else 0\n                end as ticket_recoveries\n\n    from ticket_historical_status\n\n)\n\nselect \n  ticket_id,\n  last_status_assignment_date,\n  sum(ticket_deleted) as ticket_deleted_count,\n  sum(agent_wait_time_in_minutes) as agent_wait_time_in_calendar_minutes,\n  sum(requester_wait_time_in_minutes) as requester_wait_time_in_calendar_minutes,\n  sum(solve_time_in_minutes) as solve_time_in_calendar_minutes,\n  sum(agent_work_time_in_minutes) as agent_work_time_in_calendar_minutes,\n  sum(on_hold_time_in_minutes) as on_hold_time_in_calendar_minutes,\n  sum(new_status_duration_minutes) as new_status_duration_in_calendar_minutes,\n  sum(open_status_duration_minutes) as open_status_duration_in_calendar_minutes,\n  sum(ticket_recoveries) as total_ticket_recoveries\nfrom calendar_minutes\ngroup by 1, 2\n), ticket_enriched as (\n\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk`.`zendesk__ticket_enriched`\n\n), ticket_resolution_times_calendar as (\n\n  select *\n  from __dbt__cte__int_zendesk__ticket_resolution_times_calendar\n\n), ticket_reply_times_calendar as (\n\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk`.`int_zendesk__ticket_reply_times_calendar`\n\n), ticket_comments as (\n\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__comment_metrics`\n\n), ticket_work_time_calendar as (\n\n  select *\n  from __dbt__cte__int_zendesk__ticket_work_time_calendar\n\n-- business hour CTEs\n\n-- end business hour CTEs\n\n), calendar_hour_metrics as (\n\nselect\n  ticket_enriched.*,\n  case when coalesce(ticket_comments.count_public_agent_comments, 0) = 0\n    then null\n    else ticket_reply_times_calendar.first_reply_time_calendar_minutes\n      end as first_reply_time_calendar_minutes,\n  case when coalesce(ticket_comments.count_public_agent_comments, 0) = 0\n    then null\n    else ticket_reply_times_calendar.total_reply_time_calendar_minutes\n      end as total_reply_time_calendar_minutes,\n  coalesce(ticket_comments.count_agent_comments, 0) as count_agent_comments,\n  coalesce(ticket_comments.count_public_agent_comments, 0) as count_public_agent_comments,\n  coalesce(ticket_comments.count_end_user_comments, 0) as count_end_user_comments,\n  coalesce(ticket_comments.count_public_comments, 0) as count_public_comments,\n  coalesce(ticket_comments.count_internal_comments, 0) as count_internal_comments,\n  coalesce(ticket_comments.total_comments, 0) as total_comments,\n  coalesce(ticket_comments.count_ticket_handoffs, 0) as count_ticket_handoffs, -- the number of distinct internal users who commented on the ticket\n  ticket_comments.last_comment_added_at as ticket_last_comment_date,\n  ticket_resolution_times_calendar.unique_assignee_count,\n  ticket_resolution_times_calendar.assignee_stations_count,\n  ticket_resolution_times_calendar.group_stations_count,\n  ticket_resolution_times_calendar.first_assignee_id,\n  ticket_resolution_times_calendar.last_assignee_id,\n  ticket_resolution_times_calendar.first_agent_assignment_date,\n  ticket_resolution_times_calendar.last_agent_assignment_date,\n  ticket_resolution_times_calendar.first_solved_at,\n  ticket_resolution_times_calendar.last_solved_at,\n  case when ticket_enriched.status in ('solved', 'closed')\n    then ticket_resolution_times_calendar.first_assignment_to_resolution_calendar_minutes\n    else null\n      end as first_assignment_to_resolution_calendar_minutes,\n  case when ticket_enriched.status in ('solved', 'closed')\n    then ticket_resolution_times_calendar.last_assignment_to_resolution_calendar_minutes\n    else null\n      end as last_assignment_to_resolution_calendar_minutes,\n  ticket_resolution_times_calendar.ticket_unassigned_duration_calendar_minutes,\n  ticket_resolution_times_calendar.first_resolution_calendar_minutes,\n  ticket_resolution_times_calendar.final_resolution_calendar_minutes,\n  ticket_resolution_times_calendar.total_resolutions as count_resolutions,\n  ticket_resolution_times_calendar.count_reopens,\n  ticket_work_time_calendar.ticket_deleted_count,\n  ticket_work_time_calendar.total_ticket_recoveries,\n  ticket_work_time_calendar.last_status_assignment_date,\n  ticket_work_time_calendar.new_status_duration_in_calendar_minutes,\n  ticket_work_time_calendar.open_status_duration_in_calendar_minutes,\n  ticket_work_time_calendar.agent_wait_time_in_calendar_minutes,\n  ticket_work_time_calendar.requester_wait_time_in_calendar_minutes,\n  ticket_work_time_calendar.solve_time_in_calendar_minutes,\n  ticket_work_time_calendar.agent_work_time_in_calendar_minutes,\n  ticket_work_time_calendar.on_hold_time_in_calendar_minutes,\n  coalesce(ticket_comments.count_agent_replies, 0) as total_agent_replies,\n  \n  case when ticket_enriched.is_requester_active = true and ticket_enriched.requester_last_login_at is not null\n    then (\n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(ticket_enriched.requester_last_login_at as datetime),\n        second\n    )\n\n   /60)\n      end as requester_last_login_age_minutes,\n  case when ticket_enriched.is_assignee_active = true and ticket_enriched.assignee_last_login_at is not null\n    then (\n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(ticket_enriched.assignee_last_login_at as datetime),\n        second\n    )\n\n   /60)\n      end as assignee_last_login_age_minutes,\n  case when lower(ticket_enriched.status) not in ('solved','closed')\n    then (\n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(ticket_enriched.created_at as datetime),\n        second\n    )\n\n   /60)\n      end as unsolved_ticket_age_minutes,\n  case when lower(ticket_enriched.status) not in ('solved','closed')\n    then (\n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(ticket_enriched.updated_at as datetime),\n        second\n    )\n\n   /60)\n      end as unsolved_ticket_age_since_update_minutes,\n  case when lower(ticket_enriched.status) in ('solved','closed') and ticket_comments.is_one_touch_resolution \n    then true\n    else false\n      end as is_one_touch_resolution,\n  case when lower(ticket_enriched.status) in ('solved','closed') and ticket_comments.is_two_touch_resolution \n    then true\n    else false \n      end as is_two_touch_resolution,\n  case when lower(ticket_enriched.status) in ('solved','closed') and not ticket_comments.is_one_touch_resolution\n      and not ticket_comments.is_two_touch_resolution \n    then true\n    else false \n      end as is_multi_touch_resolution\n\n\nfrom ticket_enriched\n\nleft join ticket_reply_times_calendar\n  using (ticket_id)\n\nleft join ticket_resolution_times_calendar\n  using (ticket_id)\n\nleft join ticket_work_time_calendar\n  using (ticket_id)\n\nleft join ticket_comments\n  using(ticket_id)\n\n\n\n) \n\nselect *\nfrom calendar_hour_metrics\n\n", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk`.`zendesk__ticket_metrics`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.683856Z", "completed_at": "2024-05-01T20:35:33.689376Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.689742Z", "completed_at": "2024-05-01T20:35:33.689745Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0076029300689697266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.zendesk__ticket_summary", "compiled": true, "compiled_code": "with ticket_metrics as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk`.`zendesk__ticket_metrics`\n\n), user_table as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__user`\n\n), user_sum as (\n    select\n        cast(1 as INT64) as summary_helper,\n        sum(case when is_active = true\n            then 1\n            else 0\n                end) as user_count,\n        sum(case when lower(role) != 'end-user' and is_active = true\n            then 1\n            else 0\n                end) as active_agent_count,\n        sum(case when is_active = false\n            then 1\n            else 0\n                end) as deleted_user_count,\n        sum(case when lower(role) = 'end-user' and is_active = true\n            then 1\n            else 0\n                end) as end_user_count,\n        sum(case when is_suspended = true\n            then 1\n            else 0\n                end) as suspended_user_count\n    from user_table\n\n    group by 1\n\n), ticket_metric_sum as (\n    select \n        cast(1 as INT64) as summary_helper,\n        sum(case when lower(status) = 'new'\n            then 1\n            else 0\n                end) as new_ticket_count,\n        sum(case when lower(status) = 'hold'\n            then 1\n            else 0\n                end) as on_hold_ticket_count,\n        sum(case when lower(status) = 'open'\n            then 1\n            else 0\n                end) as open_ticket_count,\n        sum(case when lower(status) = 'pending'\n            then 1\n            else 0\n                end) as pending_ticket_count,\n        sum(case when lower(type) = 'problem'\n            then 1\n            else 0\n                end) as problem_ticket_count,\n        sum(case when first_assignee_id != last_assignee_id\n            then 1\n            else 0\n                end) as reassigned_ticket_count,\n        sum(case when count_reopens > 0\n            then 1\n            else 0\n                end) as reopened_ticket_count,\n\n        sum(case when lower(ticket_satisfaction_score) in ('offered', 'good', 'bad')\n            then 1\n            else 0\n                end) as surveyed_satisfaction_ticket_count,\n\n        sum(case when assignee_id is null and lower(status) not in ('solved', 'closed')\n            then 1\n            else 0\n                end) as unassigned_unsolved_ticket_count,\n        sum(case when total_agent_replies < 0\n            then 1\n            else 0\n                end) as unreplied_ticket_count,\n        sum(case when total_agent_replies < 0 and lower(status) not in ('solved', 'closed')\n            then 1\n            else 0\n                end) as unreplied_unsolved_ticket_count,\n        sum(case when lower(status) not in ('solved', 'closed')\n            then 1\n            else 0\n                end) as unsolved_ticket_count,\n        sum(case when lower(status) in ('solved', 'closed')\n            then 1\n            else 0\n                end) as solved_ticket_count,\n        sum(case when lower(status) in ('deleted')\n            then 1\n            else 0\n                end) as deleted_ticket_count,\n        sum(case when total_ticket_recoveries > 0\n            then 1\n            else 0\n                end) as recovered_ticket_count,\n        sum(case when assignee_stations_count > 0\n            then 1\n            else 0\n                end) as assigned_ticket_count,\n        count(count_internal_comments) as total_internal_comments,\n        count(count_public_comments) as total_public_comments,\n        count(total_comments)\n    from ticket_metrics\n    \n    group by 1\n\n\n), final as (\n    select\n        user_sum.user_count,\n        user_sum.active_agent_count,\n        user_sum.deleted_user_count,\n        user_sum.end_user_count,\n        user_sum.suspended_user_count,\n        ticket_metric_sum.new_ticket_count,\n        ticket_metric_sum.on_hold_ticket_count,\n        ticket_metric_sum.open_ticket_count,\n        ticket_metric_sum.pending_ticket_count,\n        ticket_metric_sum.solved_ticket_count,\n        ticket_metric_sum.problem_ticket_count,\n        ticket_metric_sum.assigned_ticket_count,\n        ticket_metric_sum.reassigned_ticket_count,\n        ticket_metric_sum.reopened_ticket_count,\n        ticket_metric_sum.surveyed_satisfaction_ticket_count,\n        ticket_metric_sum.unassigned_unsolved_ticket_count,\n        ticket_metric_sum.unreplied_ticket_count,\n        ticket_metric_sum.unreplied_unsolved_ticket_count,\n        ticket_metric_sum.unsolved_ticket_count,\n        ticket_metric_sum.recovered_ticket_count,\n        ticket_metric_sum.deleted_ticket_count\n    from user_sum\n\n    left join ticket_metric_sum\n        using(summary_helper)\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk`.`zendesk__ticket_summary`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.687489Z", "completed_at": "2024-05-01T20:35:33.689902Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.690913Z", "completed_at": "2024-05-01T20:35:33.690917Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007875919342041016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk.unique_zendesk__ticket_metrics_ticket_id.f3dc8eba5c", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select ticket_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_zendesk`.`zendesk__ticket_metrics`\n  where ticket_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.685777Z", "completed_at": "2024-05-01T20:35:33.690068Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:33.691097Z", "completed_at": "2024-05-01T20:35:33.691100Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008545875549316406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk.not_null_zendesk__ticket_metrics_ticket_id.3466b76bbd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticket_id\nfrom `dbt-package-testing`.`zz_dbt_renee_zendesk`.`zendesk__ticket_metrics`\nwhere ticket_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:33.655261Z", "completed_at": "2024-05-01T20:35:35.014501Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:35.015281Z", "completed_at": "2024-05-01T20:35:35.015292Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3617267608642578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__field_history_pivot", "compiled": true, "compiled_code": "-- depends_on: `digital-arbor-400`.`zendesk_new`.`ticket_field_history`\n\n\n\n\n    \nwith  __dbt__cte__int_zendesk__updater_information as (\nwith users as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__user_aggregates`\n\n), organizations as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__organization_aggregates`\n\n), final as (\n    select\n        users.user_id as updater_user_id\n        ,users.name as updater_name\n        ,users.role as updater_role\n        ,users.email as updater_email\n        ,users.external_id as updater_external_id\n        ,users.locale as updater_locale\n        ,users.is_active as updater_is_active\n\n        --If you use user tags this will be included, if not it will be ignored.\n        \n\n        ,users.last_login_at as updater_last_login_at\n        ,users.time_zone as updater_time_zone\n        ,organizations.organization_id as updater_organization_id\n\n        --If you use using_domain_names tags this will be included, if not it will be ignored.\n        \n        ,organizations.domain_names as updater_organization_domain_names\n        \n\n        --If you use organization tags this will be included, if not it will be ignored.\n        \n    from users\n\n    left join organizations\n        using(organization_id)\n)\n\nselect * \nfrom final\n),  __dbt__cte__int_zendesk__field_history_enriched as (\nwith ticket_field_history as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket_field_history`\n\n), updater_info as (\n    select *\n    from __dbt__cte__int_zendesk__updater_information\n\n), final as (\n    select\n        ticket_field_history.*\n\n          \n\n    from ticket_field_history\n\n    left join updater_info\n        on ticket_field_history.user_id = updater_info.updater_user_id\n)\nselect *\nfrom final\n), field_history as (\n\n    select\n        ticket_id,\n        field_name,\n        valid_ending_at,\n        valid_starting_at\n\n        --Only runs if the user passes updater fields through the final ticket field history model\n        \n\n        -- doing this to figure out what values are actually null and what needs to be backfilled in zendesk__ticket_field_history\n        ,case when value is null then 'is_null' else value end as value\n\n    from __dbt__cte__int_zendesk__field_history_enriched\n    \n    where cast( timestamp_trunc(\n        cast(valid_starting_at as timestamp),\n        day\n    ) as date) >= (select max(date_day) from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__field_history_pivot`)\n    \n\n), event_order as (\n\n    select \n        *,\n        row_number() over (\n            partition by cast(valid_starting_at as date), ticket_id, field_name\n            order by valid_starting_at desc\n            ) as row_num\n    from field_history\n\n), filtered as (\n\n    -- Find the last event that occurs on each day for each ticket\n\n    select *\n    from event_order\n    where row_num = 1\n\n), pivots as (\n\n    -- For each column that is in both the ticket_field_history_columns variable and the field_history table,\n    -- pivot out the value into it's own column. This will feed the daily slowly changing dimension model.\n\n    select \n        ticket_id,\n        cast(timestamp_trunc(\n        cast(valid_starting_at as timestamp),\n        day\n    ) as date) as date_day\n\n        \n            \n            ,min(case when lower(field_name) = 'priority' then filtered.value end) as priority\n\n            --Only runs if the user passes updater fields through the final ticket field history model\n            \n        \n            \n            ,min(case when lower(field_name) = 'assignee_id' then filtered.value end) as assignee_id\n\n            --Only runs if the user passes updater fields through the final ticket field history model\n            \n        \n            \n            ,min(case when lower(field_name) = 'status' then filtered.value end) as status\n\n            --Only runs if the user passes updater fields through the final ticket field history model\n            \n        \n    \n    from filtered\n    group by 1,2\n\n), surrogate_key as (\n\n    select \n        *,\n        to_hex(md5(cast(coalesce(cast(ticket_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(date_day as string), '_dbt_utils_surrogate_key_null_') as string))) as ticket_day_id\n    from pivots\n\n)\n\nselect *\nfrom surrogate_key", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__field_history_pivot`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:35.017963Z", "completed_at": "2024-05-01T20:35:35.432689Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:35.435053Z", "completed_at": "2024-05-01T20:35:35.435080Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.42006564140319824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__field_history_scd", "compiled": true, "compiled_code": "-- model needs to materialize as a table to avoid erroneous null values\n \n\n\n\nwith change_data as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__field_history_pivot`\n\n), set_values as (\n\n-- each row of the pivoted table includes field values if that field was updated on that day\n-- we need to backfill to persist values that have been previously updated and are still valid \n    select \n        date_day as valid_from,\n        ticket_id,\n        ticket_day_id\n\n         \n\n        ,priority\n        ,sum(case when priority is null \n                then 0 \n                else 1 \n                    end) over (order by ticket_id, date_day rows unbounded preceding) as priority_field_partition\n         \n\n        ,assignee_id\n        ,sum(case when assignee_id is null \n                then 0 \n                else 1 \n                    end) over (order by ticket_id, date_day rows unbounded preceding) as assignee_id_field_partition\n         \n\n        ,status\n        ,sum(case when status is null \n                then 0 \n                else 1 \n                    end) over (order by ticket_id, date_day rows unbounded preceding) as status_field_partition\n        \n\n    from change_data\n\n), fill_values as (\n    select\n        valid_from, \n        ticket_id,\n        ticket_day_id\n\n         \n\n        ,first_value( priority ) over (partition by priority_field_partition, ticket_id order by valid_from asc rows between unbounded preceding and current row) as priority\n        \n         \n\n        ,first_value( assignee_id ) over (partition by assignee_id_field_partition, ticket_id order by valid_from asc rows between unbounded preceding and current row) as assignee_id\n        \n         \n\n        ,first_value( status ) over (partition by status_field_partition, ticket_id order by valid_from asc rows between unbounded preceding and current row) as status\n        \n        \n    from set_values\n) \n\nselect *\nfrom fill_values", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__field_history_scd`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:35.443119Z", "completed_at": "2024-05-01T20:35:35.903286Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:35.905906Z", "completed_at": "2024-05-01T20:35:35.905925Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.46610116958618164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.zendesk__ticket_field_history", "compiled": true, "compiled_code": "with change_data as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__field_history_scd`\n  \n    \n    where valid_from >= (select max(date_day) from `dbt-package-testing`.`zz_dbt_renee_zendesk`.`zendesk__ticket_field_history`)\n\n-- If no issue fields have been updated since the last incremental run, the pivoted_daily_history CTE will return no record/rows.\n-- When this is the case, we need to grab the most recent day's records from the previously built table so that we can persist \n-- those values into the future.\n\n), most_recent_data as ( \n\n    select \n        *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk`.`zendesk__ticket_field_history`\n    where date_day = (select max(date_day) from `dbt-package-testing`.`zz_dbt_renee_zendesk`.`zendesk__ticket_field_history` )\n\n\n\n), calendar as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_intermediate`.`int_zendesk__field_calendar_spine`\n    where date_day <= current_date\n    \n    and date_day >= (select max(date_day) from `dbt-package-testing`.`zz_dbt_renee_zendesk`.`zendesk__ticket_field_history`)\n    \n\n), joined as (\n\n    select \n        calendar.date_day,\n        calendar.ticket_id\n            \n             \n            , coalesce(change_data.priority, most_recent_data.priority) as priority\n             \n            , coalesce(change_data.assignee_id, most_recent_data.assignee_id) as assignee_id\n             \n            , coalesce(change_data.status, most_recent_data.status) as status\n            \n        \n        \n\n    from calendar\n    left join change_data\n        on calendar.ticket_id = change_data.ticket_id\n        and calendar.date_day = change_data.valid_from\n    \n    \n    left join most_recent_data\n        on calendar.ticket_id = most_recent_data.ticket_id\n        and calendar.date_day = most_recent_data.date_day\n    \n\n), set_values as (\n\n    select\n        date_day,\n        ticket_id\n\n        \n        , priority\n        -- create a batch/partition once a new value is provided\n        , sum( case when priority is null then 0 else 1 end) over ( partition by ticket_id\n            order by date_day rows unbounded preceding) as priority_field_partition\n\n        \n        , assignee_id\n        -- create a batch/partition once a new value is provided\n        , sum( case when assignee_id is null then 0 else 1 end) over ( partition by ticket_id\n            order by date_day rows unbounded preceding) as assignee_id_field_partition\n\n        \n        , status\n        -- create a batch/partition once a new value is provided\n        , sum( case when status is null then 0 else 1 end) over ( partition by ticket_id\n            order by date_day rows unbounded preceding) as status_field_partition\n\n        \n\n    from joined\n),\n\nfill_values as (\n\n    select  \n        date_day,\n        ticket_id\n\n        \n        -- grab the value that started this batch/partition\n        , first_value( priority ) over (\n            partition by ticket_id, priority_field_partition \n            order by date_day asc rows between unbounded preceding and current row) as priority\n        \n        -- grab the value that started this batch/partition\n        , first_value( assignee_id ) over (\n            partition by ticket_id, assignee_id_field_partition \n            order by date_day asc rows between unbounded preceding and current row) as assignee_id\n        \n        -- grab the value that started this batch/partition\n        , first_value( status ) over (\n            partition by ticket_id, status_field_partition \n            order by date_day asc rows between unbounded preceding and current row) as status\n        \n\n    from set_values\n\n), fix_null_values as (\n\n    select  \n        date_day,\n        ticket_id\n         \n\n        -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n        , case when  cast( priority as string ) = 'is_null' then null else priority end as priority\n         \n\n        -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n        , case when  cast( assignee_id as string ) = 'is_null' then null else assignee_id end as assignee_id\n         \n\n        -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n        , case when  cast( status as string ) = 'is_null' then null else status end as status\n        \n\n    from fill_values\n\n), surrogate_key as (\n\n    select\n        to_hex(md5(cast(coalesce(cast(date_day as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(ticket_id as string), '_dbt_utils_surrogate_key_null_') as string))) as ticket_day_id,\n        *\n\n    from fix_null_values\n)\n\nselect *\nfrom surrogate_key", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk`.`zendesk__ticket_field_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-01T20:35:35.911391Z", "completed_at": "2024-05-01T20:35:35.931804Z"}, {"name": "execute", "started_at": "2024-05-01T20:35:35.932813Z", "completed_at": "2024-05-01T20:35:35.932821Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.023866891860961914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.zendesk__ticket_backlog", "compiled": true, "compiled_code": "--This model will only run if 'status' is included within the `ticket_field_history_columns` variable.\n\n\nwith ticket_field_history as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk`.`zendesk__ticket_field_history`\n\n), tickets as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__ticket`\n\n), group_names as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__group`\n\n), users as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__user`\n\n), brands as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__brand`\n\n--The below model is excluded if the user does not include ticket_form_id in the variable as a low percentage of accounts use ticket forms.\n\n\n), organizations as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_zendesk_source`.`stg_zendesk__organization`\n\n), backlog as (\n    select\n        ticket_field_history.date_day\n        ,ticket_field_history.ticket_id\n        ,ticket_field_history.status\n        ,tickets.created_channel\n         --Looking at all history fields the users passed through in their dbt_project.yml file\n             --Standard ID field where the name can easily be joined from stg model.\n                ,assignee.name as assignee_name\n\n            \n         --Looking at all history fields the users passed through in their dbt_project.yml file\n             --All other fields are not ID's and can simply be included in the query.\n                ,ticket_field_history.priority\n            \n        \n\n    from ticket_field_history\n\n    left join tickets\n        on tickets.ticket_id = ticket_field_history.ticket_id\n\n    \n\n    \n\n     --Join not needed if fields is not located in variable, otherwise it is included.\n    left join users as assignee\n        on assignee.user_id = cast(ticket_field_history.assignee_id as bigint)\n    \n\n    \n\n    \n\n    \n\n    where ticket_field_history.status not in ('closed', 'solved', 'deleted')\n)\n\nselect *\nfrom backlog", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_zendesk`.`zendesk__ticket_backlog`"}], "elapsed_time": 7.2172160148620605, "args": {"partial_parse_file_diff": true, "log_file_max_bytes": 10485760, "use_colors": true, "send_anonymous_usage_stats": true, "defer": false, "macro_debugging": false, "show_resource_report": false, "partial_parse": true, "vars": {}, "version_check": true, "log_level": "info", "static": false, "strict_mode": false, "write_json": true, "static_parser": true, "log_path": "/Users/renee/Documents/dbt/zendesk/develop/logs", "invocation_command": "dbt docs generate", "compile": true, "profiles_dir": "/Users/renee/.dbt", "indirect_selection": "eager", "select": [], "quiet": false, "cache_selected_only": false, "empty_catalog": false, "log_format": "default", "log_level_file": "debug", "project_dir": "/Users/renee/Documents/dbt/zendesk/develop", "log_format_file": "debug", "which": "generate", "printer_width": 80, "favor_state": false, "populate_cache": true, "print": true, "introspect": true, "use_colors_file": true, "exclude": [], "warn_error_options": {"include": [], "exclude": []}, "enable_legacy_logger": false}}